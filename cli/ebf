#!/bin/bash
AUTH_TOKEN=""
OPTION=""
OPTION2=""
SERVER_URL=""
DEVICE_LIST=()
MY_DEVICE_LIST=()
USER_NAME=""
GPIO_PIN_DATA=""
VERSION="1.0.2"

function check_dependencies() {
	packageList="jq curl sshpass"

	for packageName in $packageList; do
      dpkg -s "$packageName" &>> /dev/null
	    if [ $? -ne 0 ];then
        echo "[ERROR] Package $packageName not found. Please install it"
        exit 1
      fi
	done
}

function help() {
  echo " "
  echo "Usage: ebf [OPTION]"
  echo " "
  echo "Command line tool to access Timesys EBF"
  echo ""
  echo "Options:"
  echo "   login            For login into EBF Server, required only first time"
  echo "   list             To list all active devices and stored configuration"
  echo "   mydevices        Provide the list of devices assigned to current User"
	echo "   fmanager         Upload, Download images and other operations for EBF-FileMnager"
	echo "   version          To see the EBF-CLI Version"
  echo "   <device name>    To see the information and perform operation on a device"
  echo "   help             Provide help guide"
  echo ""
  echo "Run 'ebf [OPTION] help' for more information on a Option"
	echo ""
	echo "Run 'ebf <device-name> help' for Information regarding device specific features"
  echo " "
  exit 1
}

function help_login() {
  echo " "
  echo "Usage: ebf login"
  echo " "
  echo "Description:"
  echo "   login            For login into EBF Server, required only first time."
  echo "                    If you want to change EBF-server or change the User-credentials"
	echo "                    then use the \"ebf login\" command and follow the instructions"
  echo " "
	echo "Run 'ebf <device-name> help' for Information regarding device specific features"
  exit 1
}

function help_list() {
  echo " "
  echo "Usage: ebf list [COMMAND]"
  echo " "
  echo "Commands:"
  echo "   config           Provide the details of User configured and EBF-Server"
  echo "   devices          Provide the list of all the active devices in EBF-server"
  echo ""
	echo "Run 'ebf <device-name> help' for Information regarding device specific features"
  exit 1
}

function help_mydevices() {
	echo " "
	echo "Usage: ebf mydevices"
	echo " "
	echo "Description:"
	echo "   mydevices        Provide the list of devices assigned to current User"
	echo " "
	echo "Run 'ebf <device-name> help' for Information regarding device specific features"
	exit 1
}

function help_version() {
	echo " "
	echo "Usage: ebf version"
	echo " "
	echo "Description:"
	echo "   To see the Current version of EBF-CLI installed"
	echo " "
	exit 1
}

function help_device() {
  echo " "
  echo "Usage: ebf <device name> [OPTION]"
	echo ""
  echo "Options:"
  echo "   status           Provide device allocation details, currently assigned to someone or free."
  echo "   allocate         Allocate a device to current User"
  echo "   release          Release a device assigned to current User"
  echo "   info             Provide details of a device"
  echo "   power            Current status of power or run on/off/reboot/user-defined power command"
  echo "   hotplug          Current state of a hotplug or on/off/switch the state of a hotplug"
  echo "   portfw           Forward a device port to a Zombie port using NAT/SSH"
  echo "   serial           Execute a command or Download/Upload a file over serial connection"
	echo "   ssh              Execute a command or Download/Upload a file over ssh connection"
  echo "   console          Access the serial console of a device"
  echo "   gpio             Perform Various operations on IOCX GPIO's"
  echo "   list             List all the lab controllers assigned to a device"
	echo "   netboot          Upload, Download images and other operations for network boot Image management"
	echo "   sdcard           Partition, Format and other operations related to SDCard management."
	echo "   usb              Partition, Format and other operations related to USB management."
	echo "   uboot            For flashing u-bbot ino a device using serial connection through Xmodem/Ymodem/Zmodem"
  echo ""
  echo "Run 'ebf  <device name> [OPTION] help' for more information of a option."
  echo " "
  exit
}

function help_device_status() {
  echo " "
  echo "Usage: ebf <device name> status"
  echo " "
	echo "Example: ebf bbb01 status"
	echo " "
	echo "Description:"
  echo "   Provide the details of device assignee, whether it is assigned"
  echo "   to a User or free for allocation."
  echo " "
  exit
}

function help_device_allocate() {
  echo " "
  echo "Usage: ebf <device name> allocate"
  echo " "
	echo "Example: ebf bbb01 allocate"
	echo " "
	echo "Description:"
  echo "   It will allocate the device to the current User"
  echo " "
  exit
}

function help_device_release() {
  echo " "
  echo "Usage: ebf <device name> release [OPTION]"
  echo " "
	echo "Example: ebf bbb01 release"
	echo " "
	echo "Example: ebf bbb01 release force"
	echo " "
	echo "Description:"
  echo "    By Default It will release the device assigned to the current user"
	echo "    Use option \"force\" if it assigned to some other User"
  echo ""
  echo "Options:"
  echo "    force            Release a device assigned to Other User"
  exit
}

function help_device_info() {
  echo " "
  echo "Usage: ebf <device name> info"
  echo " "
	echo "Example: ebf bbb01 info"
  echo ""
	echo "Description:"
  echo "   Provides information of a Device like Zombie's, Power port, Power commands,"
  echo "   TFTP,NFS dir etc."
  echo ""
  exit
}

function help_device_power() {
  echo " "
  echo "Usage: ebf <device name> power [status/on/off/reboot/user-defined-command]"
  echo " "
	echo "Example: ebf bbb01 power status"
  echo ""
  echo "Options:"
  echo "   status                  Provides the current power status of a device"
  echo "   on                      Power ON the device"
  echo "   off                     Power OFF the device"
  echo "   reboot                  Power REBOOT the device"
  echo "   user-defined-command    any other supported user-defined command"
  echo ""
	echo "Run 'ebf <device-name> help' for Information regarding device specific features"

  exit
}

function help_device_hotplug() {
  echo " "
  echo "Usage: ebf <device name> hotplug [1-4] [status/on/off/switch]"
  echo ""
	echo "Example: ebf bbb01 hotplug 1 status"
  echo ""
  echo "Options:"
  echo "   status                  Provides the current Hotplug status whether it is"
  echo "                           connected to device side or not"
  echo "   on                      Connect hotplug to Device side"
  echo "   off                     Disconnect hotplug from Device"
  echo "   switch                  Toggle the current state of a particular hotplug"
  echo ""
  exit
}

function help_device_portfw() {
  echo " "
  echo "Usage: ebf <device name> portfw [list/add/remove] [ARGS]"
  echo ""
	echo "Examples:"
	echo "    1. ebf bbb01 portfw list (List all the SSH forwarded port)"
	echo "    2. ebf bbb01 portfw add 192.168.111.10 22 8022 tcp (To add a Port Forward Rule)"
	echo "    3. ebf bbb01 portfw remove 192.168.111.10 22 8022 tcp (To Remove a Port Forward Rule)"
  echo ""
	echo ""
  echo "Options:"
  echo "   list                  Provides list of all the IP rules forwarded on a Zombie"
  echo "   add  [ARGS]           To Add a new port forward rule"
  echo "   remove [ARGS]         To Add a new port forward rule"
  echo ""
	echo ""
	echo "Run 'ebf  <device name> portfw [OPTION] help' for more information about a option."
	echo ""
  exit
}

function help_device_portfw_list() {
  echo " "
  echo "Usage: ebf <device name> portfw list"
  echo ""
	echo "Examples:"
	echo "       ebf bbb01 portfw list"
  echo ""
  exit 1
}

function help_device_portfw_add() {
	echo " "
	echo " Usage  : ebf <device name> portfw add <device-ip> <dut-port> <zombie-port> <protocol>"
	echo " Example:"
	echo "          ebf bbb01 portfw add 192.168.111.10 22 8022 tcp"
  echo ""
  exit 1
}

function help_device_portfw_remove() {
	echo " Usage  : ebf <device name> portfw remove <device-ip> <dut-port> <zombie-port> <protocol>"
	echo " Example: "
	echo "          ebf bbb01 portfw remove 192.168.111.10 22 8022 tcp"
  echo ""
	exit 1
}

function help_device_serial() {
  echo " "
  echo "Usage: ebf <device name> serial [run/download/upload] [ARGS]"
  echo " "
  echo ""
  echo "Options:"
  echo "   run              Run a command on a device and Display it's OUTPUT using serial console"
  echo "   download         Download a file to a local system from device using serial console"
  echo "   upload           Upload a local file to a device using serial console"
  echo ""
	echo "Run 'ebf  <device name> serial [OPTION] help' for more information of a option."
  exit
}

function help_device_serial_run() {
  echo " "
  echo "Usage: ebf <device name> serial run \"<command>\""
  echo " "
	echo "Example: ebf bbb01 serial run \"date\" "
	echo ""
  exit 1
}

function help_device_serial_upload() {
  echo " "
  echo "Usage: ebf <device name> serial upload \"<src-file-or-dir>\" \"<upload-path-at-device>\""
  echo " "
	echo "Example: ebf bbb01 serial upload test.txt /tmp/"
	echo ""
  exit 1
}

function help_device_serial_download() {
  echo " "
  echo "Usage: ebf <device name> serial download \"<file-or-dir-path-at-device>\" \"<destination-path>\""
  echo " "
	echo "Example: ebf bbb01 serial download /tmp/test.txt ./"
	echo ""
  exit 1
}

function help_device_ssh() {
  echo " "
  echo "Usage: ebf <device name> ssh [run/download/upload] [ARGS]"
  echo " "
  echo ""
  echo "Options:"
  echo "   run              Run a command on a device and Display it's OUTPUT using ssh"
  echo "   download         Download a file to a local system from device using ssh"
  echo "   upload           Upload a local file to a device using ssh"
	echo "   import-key       To import Zombie ssh-key into Zombie for password-less opreations "
  echo ""
	echo "Run 'ebf  <device name> ssh [OPTION] help' for more information of a option."
  exit
}

function help_device_ssh_run() {
  echo " "
  echo "Usage: ebf <device name> ssh run \"<command>\""
  echo " "
	echo "Example: ebf bbb01 ssh run \"date\" "
	echo ""
  exit 1
}

function help_device_ssh_upload() {
  echo " "
  echo "Usage: ebf <device name> ssh upload <src-file-path> <dst-file-path> <permissions[optional]>"
  echo " "
  echo "Example:"
	echo "    1. ebf bbb01 ssh upload /home/admin/hello.txt /home/user/hello1.txt"
  echo "    2. ebf bbb01 ssh upload /home/admin/hello.txt /home/user/hello1.txt 777"
	echo ""
  exit 1
}

function help_device_ssh_download() {
  echo " "
  echo "Usage: ebf <device name> ssh download <src-file-path> <dst-file-path> "
  echo " "
  echo "Example: "
	echo "       ebf bbb01 ssh download /home/admin/hello.txt ./hello1.txt"
	echo ""
	exit 1
}

function help_device_ssh_import_key() {
	echo " "
  echo "Usage: ebf <device name> ssh import-key <device-ip> <username> <password>"
  echo " "
  echo "Example:"
	echo "       ebf bbb02 ssh import-key 192.168.111.11 root root"
	echo ""
	exit 1
}

function help_device_console() {
	echo " "
  echo "Usage: ebf <device name> console"
  echo " "
	echo "Example: ebf bbb01 console"
  echo ""
	echo "Description:"
  echo "   Provides the access of device serial console"
  echo ""
  exit
}

function help_device_gpio() {
  echo " "
  echo "Usage: ebf <device name> gpio [COMMANDS] [GPIO PIN PATTERN] [GPIO_PIN_DATA/OPTIONAL]"
  echo " "
  echo ""
  echo "Commands             GPIO Pin Pattern       GPIO Pin Data"
  echo "  set_mode_mask          1-255                  0-255"
  echo "  get_mode_mask          1-255                           "
  echo "  write_mask             1-255                  0-255    "
  echo "  read_mask              1-255                           "
  echo "  set_mode               1-8                    {read,write}"
  echo "  get_mode               1-8                                "
  echo "  read                   1-8                                "
  echo "  write                  1-8                    0-1         "
}

function help_device_list() {
	echo " "
	echo "Usage:   ebf <device> list [Option]"
	echo " "
	echo "Example: ebf bbb01 list labcontrollers"
	echo ""
	echo "Options:"
	echo "   labcontrollers   List all the lab controllers assigned to a device"
	echo ""
	echo "Run 'ebf <device-name> help' for Information regarding device specific features"
	exit
}

function help_device_bfc() {
	echo " "
	echo "Usage: ebf <device name> bfc ls [Folder Path]"
	echo " "
	echo "Example: ebf bbb01 bfc ls sda1"
	echo ""
	echo "Description:"
	echo "   List the content of ebf file server"
	echo ""
	exit
}

function help_device_netboot() {
	echo " "
  echo "Usage:   ebf <device name> netboot [OPTION]"
	echo ""
	echo "Example: ebf bbb01 netboot ls"
  echo "Options:"
  echo "   ls              List the content of Network Boot Directory or sub-directory"
  echo "   mkdir           Create a directory inside Network Boot directory or sub-directory "
  echo "   rm              Delete a directory inside Network Boot directory or sub-directory"
  echo "   transfer        Extract a rootfs or copy files to Network Boot directory"
	echo "   download        Download a file from Network Boot Directory to local machine"
	echo "   upload          Upload a file from Local Machine to Network Boot Directory"
  echo "   symlink         Create a symlink of o rootfs directory with fsroot"
  echo ""
  echo "Run 'ebf  <device name> netboot [OPTION] help' for more information about a option."
  echo " "
  exit
}

function help_device_netboot_upload() {
	echo " "
	echo "Usage:  ebf <device-name> netboot upload [SRC_FILE_PATH] [DST_FILE_PATH]"
	echo ""
	echo "Example: "
	echo "    ebf bbb01 sdcard netboot /tmp/file1.txt fsroot/"
	echo ""
	echo "Description"
	echo "    Upload a file into a Network-Boot Directory or Sub-Directory"
	echo " "
	exit 1
}

function help_device_netboot_ls() {
	echo " "
  echo "Usage:   ebf <device name> netboot ls [DIR_NAME_OPTIONAL]"
	echo ""
	echo "Example: ebf bbb01 netboot ls"
	echo ""
  echo "Description"
  echo "   List the content of Network Boot Directory, by default it shows the content of"
	echo "   Network-boot directory assigned to that device e.g. if device is connected to"
	echo "   port-1 then it will show the content of NFS-directory \"DUT1\". "
	echo "   You can also provide a directory or sub-directory inside DUT1 folder."
	echo ""
	echo "Example: ebf bbb01 netboot ls fsroot"
}

function help_device_netboot_mkdir() {
	echo " "
  echo "Usage:   ebf <device name> netboot mkdir [DIR_NAME]"
	echo ""
	echo "Example: ebf bbb01 netboot mkdir tmp"
	echo ""
  echo "Description"
  echo "   Create a directory inside Network Boot Directory, by default it will create directory inside"
	echo "   Network-boot directory assigned to that device e.g. if device is connected to"
	echo "   port-1 then it will create directory inside the NFS-directory \"DUT1\". "
	echo "   You can also create a directory or sub-directory inside a folder."
	echo ""
	echo "Example: ebf bbb01 netboot mkdir fsroot/tmp"
}

function help_device_netboot_rm() {
	echo " "
  echo "Usage:   ebf <device name> netboot rm [DIR_NAME]"
	echo ""
	echo "Example: ebf bbb01 netboot rm tmp"
	echo ""
  echo "Description"
  echo "   Delete a directory inside Network Boot Directory, by default it will delete directory inside"
	echo "   Network-boot directory assigned to that device e.g. if device is connected to"
	echo "   port-1 then it will delete directory inside the NFS-directory \"DUT1\". "
	echo "   You can also delete a directory or sub-directory inside a folder."
	echo ""
	echo "Example: ebf bbb01 netboot rm fsroot/tmp"
}

function help_device_netboot_transfer() {
	echo " "
  echo "Usage:   ebf <device name> netboot transfer [local|server|status|remove] [OPTIONS]"
	echo ""
  echo "Description"
  echo "   local|server     Extract or copy a File/Dir from local system or EBF-Server"
	echo "                    into a Network-Boot Directory or sub-directory."
	echo "   status [JOB-ID]  it will provide the status off all the transfer jobs in running or queue state"
	echo "                    You can also check the status of a single job using transfer Job-ID."
	echo "   remove [Job-ID]  It will cancel the jobs and remove it from the list"
	echo ""
	echo "Option Includes:"
	echo "  *   -f | --file            - path of a local file or EBF-Server"
	echo "      -t | --tool            - provide tool from [tar, cp, unzip] to transfer a file"
	echo "      -d | --dir             - Name of a directory in which you want to extract rootfs default is \"fsroot\""
	echo "      -a | --cmd-args        - any arguments you want to provide with transfer tool selected"
	echo "      -r | --remove-after    - This will delete file from EBF-Server after transferring value should be \"on/off\""
	echo ""
	echo "  *  Indicates Mandatory Arguments "
	echo ""
	echo "Usage Examples:"
	echo "   1. ebf bbb01 netboot transfer local -f /tmp/hello.txt"
	echo "   2. ebf bbb01 netboot transfer local -f /tmp/hello.txt -d fsroot"
	echo "   3. ebf bbb01 netboot transfer local -f /tmp/rootfs.tar.gz -d my-rootfs -t tar -a xz -r on"
	echo "   4. ebf bbb01 netboot transfer server -f rootfs.tar.gz -d my-rootfs -t tar -a xz -r on"
	echo "   5. ebf bbb01 netboot transfer status"
	echo "   6. ebf bbb01 netboot transfer status 04366c6a-fde2-424d-9aea-1174cb24650d"
	echo "   7. ebf bbb01 netboot upload remove 04366c6a-fde2-424d-9aea-1174cb24650d"
	echo ""
}

function help_device_netboot_download() {
  echo " "
  echo "Usage: ebf <device name> netboot download <src-file-path> <dst-file-path> "
  echo " "
  echo "e.g. ebf bbb01 netboot download /home/admin/hello.txt ./hello1.txt"
	exit
}

function help_device_netboot_symlink() {
	echo " "
  echo "Usage:   ebf <device name> netboot symlink [DIR Name]"
	echo ""
	echo "Example:"
	echo "   ebf bbb01 netboot symlink (Provide the current symlink dir name)"
	echo "   ebf bbb01 netboot symlink rootfs (it will create link \"fsroot\" to directory rootfs)"
	echo ""
  echo "Description"
  echo "   To get the status of current symlink directory or to create a symlink to new directory"
	echo ""
}

function help_device_sdcard() {
	echo " "
  echo "Usage:   ebf <device name> sdcard [OPTION] [ARGS]"
	echo ""
	echo "Example: ebf bbb01 sdcard info"
  echo "Options:"
	echo "   info            Provides the SDCard information it's size, partition etc."
	echo "   side            Provides whether the SDCard is connected to Zombie side or Device side."
	echo "   switch          It will switch the sdcard from Zombie to Device side or vice versa."
  echo "   ls              List the partition or content inside a partition"
  echo "   mkdir           Create a directory inside SDCard partition directory or sub-directory"
  echo "   rm              Delete a directory inside SDCard partition directory or sub-directory"
  echo "   format          Format a SDCard partition"
  echo "   partition       Create SDCard partitions"
	echo "   backup          Create a backup of SDCard"
	echo "   flash           Upload/Extract/Copy/Flash a rootfs/file/image to a sdcard or it's partition"
	echo "   download        Download a file from a SDCard Partition to local machine"
	echo "   upload          Upload a file from Local Machine to a SDCard Partition"
  echo ""
  echo "Run 'ebf  <device name> sdcard [OPTION] help' for more information about a option."
	echo "Example: ebf bbb01 sdcard flash help"
  echo " "
  exit
}

function help_device_sdcard_switch() {
	echo " "
  echo "Usage:   ebf <device name> sdcard switch [device|zombie|side]"
	echo ""
	echo "Example: ebf bbb01 sdcard switch zombie"
	echo ""
  echo "Description"
  echo "   It will connect the sdcard to Device side or Zombie side or Switch from the current side"
	echo ""
	exit 1
}

function help_device_sdcard_ls() {
	echo " "
  echo "Usage:   ebf <device name> sdcard ls [DIR_NAME_OPTIONAL]"
	echo ""
	echo "Example: ebf bbb01 sdcard ls"
	echo ""
  echo "Description"
  echo "   List the content of SDCard, by default it shows the partitions"
	echo "   of SDCard and you can provide that partition or directory inside that partition"
	echo "   It will show thw content of that directory."
	echo ""
	echo "Example: ebf bbb01 sdcard ls sda2/fsroot"
	exit 1
}

function help_device_sdcard_mkdir() {
	echo " "
  echo "Usage:   ebf <device name> sdcard mkdir [DIR_NAME]"
	echo ""
	echo "Example: ebf bbb01 sdcard mkdir sda2/tmp"
	echo ""
  echo "Description"
	echo "   Create a directory inside a SDCard partition, directory name is mandatory."
	echo ""
	exit 1
}

function help_device_sdcard_rm() {
	echo " "
  echo "Usage:   ebf <device name> sdcard rm [DIR_NAME/FileName]"
	echo ""
	echo "Example: ebf bbb01 sdcard rm tmp"
	echo ""
  echo "Description"
  echo "   Delete a directory/file inside a sdcard partition, directory or file name is mandatory."
	echo ""
	exit 1
}

function help_sdcard_format() {
	echo " "
  echo "Usage:   ebf <device name> sdcard format partition,partition-type"
	echo ""
	echo "Example:"
	echo "   ebf bbb01 sdcard format sda1,vfat sda2,ext4"
	echo ""
  echo "Description"
  echo "   Format a sdcard partition. The format partition information should be provide in the form of"
	echo "   \",\" seperated of \"PARTITION,PARTITION_TYPE\". The above example will format Partiion sda1"
	echo "   into vfat and sdb2 into ext4"
	echo ""
	exit 1
}

function help_sdcard_partition() {
	echo " "
  echo "Usage:   ebf <device name> sdcard partiion label,size,partition-type,bootable(optional)"
	echo ""
	echo "Example:"
	echo "   1. ebf bbb01 sdcard partition A,1000,vfat B,8000,ext4"
	echo "   2. ebf bbb01 sdcard partition A,1000,vfat,True B,8000,ext4"
	echo ""
  echo "Description"
  echo "   Create and format sdcard partition. The partition information should be provide \",\" seperated"
	echo "   in the form of LABEL,SIZE(MB),PARTITION_TYPE,BOOTABLE(True/FALSE)."
	echo "   The above example #1 will create Partition A of size 1000 MB and type of Vfat"
	echo "   and Partition B of size 8000 MB and type ext4"
	echo ""
	exit 1
}

function help_device_sdcard_backup() {
	echo " "
	echo "Usage:   ebf <device name> sdcard backup [status|remove] [ARGS]"
	echo ""
	echo "Description"
	echo "   status [JOB-ID]  it will provide the status off all the backup jobs in running or queue state"
	echo "                    You can also check the status of a single job using backup Job-ID."
	echo "   remove [Job-ID]  It will cancel the backup jobs and remove it from the list"
	echo ""
	echo ""
	echo "Usage Examples:"
	echo "   1. ebf bbb01 sdcard backup"
	echo "   2. ebf bbb01 sdcard backup status"
	echo "   3. ebf bbb01 sdcard backup status 04366c6a-fde2-424d-9aea-1174cb24650d"
	echo "   4. ebf bbb01 sdcard backup remove 04366c6a-fde2-424d-9aea-1174cb24650d"
	echo ""
	exit 1
}

function help_device_sdcard_flash() {
	echo " "
  echo "Usage:   ebf <device name> sdcard flash [local|server|status|remove] [OPTIONS]"
	echo ""
  echo "Description"
  echo "   local|server     Extract or copy a File/Dir from local system or EBF-Server"
	echo "                    into a SDCrad Partition or Directory."
	echo "   status [JOB-ID]  it will provide the status off all the flashing jobs in running or queue state"
	echo "                    You can also check the status of a single job using upload Job-ID."
	echo "   remove [Job-ID]  It will cancel the jobs and remove it from the list"
	echo ""
	echo "Option Includes:"
	echo "  *   -f | --file            - path of a local file or EBF-Server"
	echo "  *   -p | --partition       - partition in which you want to copy/flash image"
	echo "      -t | --tool            - provide tool from [tar, cp, unzip, dd, zcat_dd, bmaptool] to upload/flash a file/image"
	echo "      -b | --backup          - Backup SDCard befor flashing an image, valid options are [on/off]"
	echo "      -m | --mkfs            - Format sdcard before flashing an image, valid options are [on/off]"
	echo "      -a | --cmd-args        - any arguments you want to provide with upload tool selected"
	echo "      -r | --remove-after    - This will delete file from EBF-Server after image flashing, valid options are [on/off]"
	echo "   -bmap | --bmap-file       - Path of any bmap file"
	echo ""
	echo "  *  Indicates Mandatory Arguments "
	echo ""
	echo "Usage Examples:"
	echo "   1. ebf bbb01 sdcard flash local -f /tmp/hello.txt -p sda1"
	echo "   2. ebf bbb01 sdcard flash local -f /tmp/rootfs.tar.gz -p sda2 -t tar -a xz -m on"
	echo "   3. ebf bbb01 sdcard flash server -f rootfs.tar.gz -p sda2 -t tar -a xz -m on -r on"
	echo "   4. ebf bbb01 sdcard flash server -f rootfs.tar.gz -p sda2 -t tar -a xz -m on -r on -b on"
	echo "   5. ebf bbb01 sdcard flash status"
	echo "   6. ebf bbb01 sdcard flash status 04366c6a-fde2-424d-9aea-1174cb24650d"
	echo "   7. ebf bbb01 sdcard flash remove 04366c6a-fde2-424d-9aea-1174cb24650d"
	echo ""
	exit 1
}

function help_device_sdcard_upload() {
	echo " "
	echo "Usage:  ebf <device-name> sdcard upload [SRC_FILE_PATH] [DST_FILE_PATH]"
	echo ""
	echo "Example: "
	echo "    ebf bbb01 sdcard upload /tmp/file1.txt sdb1/"
	echo ""
	echo "Description"
	echo "    Upload a file into a SDCard Partition, Directory or Sub-Directory"
	echo " "
	exit 1
}

function help_device_sdcard_download() {
	echo " "
  echo "Usage: ebf <device name> sdcard download <src-file-path> <dst-file-path> "
  echo " "
  echo "e.g. ebf bbb01 sdcard download sdb1/test.txt  /tmp/"
	exit 1
}

function help_device_usb() {
	echo " "
  echo "Usage:   ebf <device name> usb [OPTION] [ARGS]"
	echo ""
	echo "Example: ebf bbb01 usb info"
  echo "Options:"
	echo "   info            Provides the USB information it's size, partition etc."
	echo "   side            Provides whether the USB is connected to Zombie side or Device side."
	echo "   switch          It will switch the USB from Zombie to Device side or vice versa."
  echo "   ls              List the partition or content inside a partition"
  echo "   mkdir           Create a directory inside USB partition, directory or sub-directory"
  echo "   rm              Delete a directory inside USB partition, directory or sub-directory"
  echo "   format          Format a USB partition"
  echo "   partition       Create USB partitions"
	echo "   backup          Create a backup of USB Drive"
	echo "   flash           Upload/Extract/Copy/Flash a rootfs/file/image to a USB or it's partition"
	echo "   download        Download a file from a USB Partition to local machine"
	echo "   upload          Upload a file from Local Machine to a USB Partition"
  echo ""
  echo "Run 'ebf  <device name> usb [OPTION] help' for more information about a option."
	echo "Example: ebf bbb01 usb flash help"
  echo " "
  exit 1
}

function help_device_usb_switch() {
	echo " "
  echo "Usage:   ebf <device name> usb switch [device|zombie|side]"
	echo ""
	echo "Example: ebf bbb01 usb switch zombie"
	echo ""
  echo "Description"
  echo "   It will connect the USB to Device side or Zombie side or Switch from the current side"
	echo ""
	exit 1
}

function help_device_usb_ls() {
	echo " "
  echo "Usage:   ebf <device name> usb ls [DIR_NAME_OPTIONAL]"
	echo ""
	echo "Example: ebf bbb01 usb ls"
	echo ""
  echo "Description"
  echo "   List the content of USB, by default it shows the partitions"
	echo "   of USB and you can provide that partition or directory inside that partition"
	echo "   It will show thw content of that directory."
	echo ""
	echo "Example: ebf bbb01 usb ls sda2/fsroot"
	exit 1
}

function help_device_usb_mkdir() {
	echo " "
  echo "Usage:   ebf <device name> usb mkdir [DIR_NAME]"
	echo ""
	echo "Example: ebf bbb01 usb mkdir sda2/tmp"
	echo ""
  echo "Description"
	echo "   Create a directory inside a USB partition, directory name is mandatory."
	echo ""
	exit 1
}

function help_device_usb_rm() {
	echo " "
  echo "Usage:   ebf <device name> usb rm [DIR_NAME/FileName]"
	echo ""
	echo "Example: ebf bbb01 usb rm tmp"
	echo ""
  echo "Description"
  echo "   Delete a directory/file inside a USB partition, directory or file name is mandatory."
	echo ""
	exit 1
}

function help_usb_format() {
	echo " "
  echo "Usage:   ebf <device name> usb format partition,partition-type"
	echo ""
	echo "Example:"
	echo "   ebf bbb01 usb format sda1,vfat sda2,ext4"
	echo ""
  echo "Description"
  echo "   Format a USB partition. The format partition information should be provide in the form of"
	echo "   \",\" seperated of \"PARTITION,PARTITION_TYPE\". The above example will format Partiion sda1"
	echo "   into vfat and sdb2 into ext4"
	echo ""
	exit 1
}

function help_usb_partition() {
	echo " "
  echo "Usage:   ebf <device name> usb partiion label,size,partition-type,bootable(optional)"
	echo ""
	echo "Example:"
	echo "   1. ebf bbb01 usb partition A,1000,vfat B,8000,ext4"
	echo "   2. ebf bbb01 usb partition A,1000,vfat,True B,8000,ext4"
	echo ""
  echo "Description"
  echo "   Create and format USB partition. The partition information should be provide \",\" seperated"
	echo "   in the form of LABEL,SIZE(MB),PARTITION_TYPE,BOOTABLE(True/FALSE)."
	echo "   The above example #1 will create Partition A of size 1000 MB and type of Vfat"
	echo "   and Partition B of size 8000 MB and type ext4"
	echo ""
	exit 1
}

function help_device_usb_backup() {
	echo " "
	echo "Usage:   ebf <device name> usb backup [status|remove] [ARGS]"
	echo ""
	echo "Description"
	echo "   status [JOB-ID]  it will provide the status off all the backup jobs in running or queue state"
	echo "                    You can also check the status of a single job using backup Job-ID."
	echo "   remove [Job-ID]  It will cancel the backup jobs and remove it from the list"
	echo ""
	echo ""
	echo "Usage Examples:"
	echo "   1. ebf bbb01 usb backup"
	echo "   2. ebf bbb01 usb backup status"
	echo "   3. ebf bbb01 usb backup status 04366c6a-fde2-424d-9aea-1174cb24650d"
	echo "   4. ebf bbb01 usb backup remove 04366c6a-fde2-424d-9aea-1174cb24650d"
	echo ""
	exit 1
}

function help_device_usb_flash() {
	echo " "
  echo "Usage:   ebf <device name> usb flash [local|server|status|remove] [OPTIONS]"
	echo ""
  echo "Description"
  echo "   local|server     Extract or copy a File/Dir from local system or EBF-Server"
	echo "                    into a USB Partition or Directory."
	echo "   status [JOB-ID]  it will provide the status off all the flashing jobs in running or queue state"
	echo "                    You can also check the status of a single job using upload Job-ID."
	echo "   remove [Job-ID]  It will cancel the jobs and remove it from the list"
	echo ""
	echo "Option Includes:"
	echo "  *   -f | --file            - path of a local file or EBF-Server"
	echo "  *   -p | --partition       - partition in which you want to copy/flash image"
	echo "      -t | --tool            - provide tool from [tar, cp, unzip, dd, zcat_dd, bmaptool] to upload/flash a file/image"
	echo "      -b | --backup          - Backup USB befor flashing an image, valid options are [on/off]"
	echo "      -m | --mkfs            - Format USB before flashing an image, valid options are [on/off]"
	echo "      -a | --cmd-args        - any arguments you want to provide with upload tool selected"
	echo "      -r | --remove-after    - This will delete file from EBF-Server after image flashing, valid options are [on/off]"
	echo "   -bmap | --bmap-file       - Path of any bmap file"
	echo ""
	echo "  *  Indicates Mandatory Arguments "
	echo ""
	echo "Usage Examples:"
	echo "   1. ebf bbb01 usb flash local -f /tmp/hello.txt -p sda1"
	echo "   2. ebf bbb01 usb flash local -f /tmp/rootfs.tar.gz -p sda2 -t tar -a xz -m on"
	echo "   3. ebf bbb01 usb flash server -f rootfs.tar.gz -p sda2 -t tar -a xz -m on -r on"
	echo "   4. ebf bbb01 usb flash server -f rootfs.tar.gz -p sda2 -t tar -a xz -m on -r on -b on"
	echo "   5. ebf bbb01 usb flash status"
	echo "   6. ebf bbb01 usb flash status 04366c6a-fde2-424d-9aea-1174cb24650d"
	echo "   7. ebf bbb01 usb flash remove 04366c6a-fde2-424d-9aea-1174cb24650d"
	echo ""
	exit 1
}

function help_device_usb_upload() {
	echo " "
	echo "Usage:  ebf <device-name> usb upload [SRC_FILE_PATH] [DST_FILE_PATH]"
	echo ""
	echo "Example: "
	echo "    ebf bbb01 usb upload /tmp/file1.txt sdb1/"
	echo ""
	echo "Description"
	echo "    Upload a file into a USB Partition, Directory or Sub-Directory"
	echo " "
	exit 1
}

function help_device_usb_download() {
	echo " "
  echo "Usage: ebf <device name> usb download <src-file-path> <dst-file-path> "
  echo " "
  echo "e.g. ebf bbb01 usb download sdb1/test.txt  /tmp/"
	exit 1
}

function help_fmanager() {
	echo " "
	echo "Usage:   ebf fmanager [OPTION]"
	echo ""
	echo "Example: ebf fmanager ls"
	echo ""
	echo "Options:"
	echo "   ls              List the content of EBF-FileManager Directory or sub-directory"
	echo "   mkdir           Create a directory inside EBF-FileManager directory or sub-directory "
	echo "   rm              Delete a directory inside EBF-FileManager directory or sub-directory"
	echo "   upload          Copy files to EBF-FileManager directory"
	echo "   download        Download a file from EBF-FileManager Directory to local machine"
	echo ""
	exit 1
}

function help_fmanager_ls() {
	echo " "
  echo "Usage:  ebf fmanager ls [DIR_NAME_OPTIONAL]"
	echo ""
	echo "Example: "
	echo "  1. ebf fmanager ls"
	echo "  2. ebf fmanager ls admin"
  echo "Description"
  echo "   List the content of EBF-FileManager"
	echo " "
	exit 1
}

function help_fmanager_mkdir() {
	echo " "
	echo "Usage:  ebf fmanager mkdir [DIR_NAME]"
	echo ""
	echo "Example: "
	echo "     ebf fmanager mkdir fsroot"
	echo ""
	echo "Description"
	echo "   Create a directory inside EBF-FileManager"
	echo " "
	exit 1
}

function help_fmanager_rm() {
	echo " "
	echo "Usage:  ebf fmanager rm [DIR_NAME]"
	echo ""
	echo "Example: "
	echo "    ebf fmanager rm fsroot"
	echo ""
	echo "Description"
	echo "   Delete a directory inside EBF-FileManager"
	echo " "
	exit 1
}

function help_fmanager_upload() {
	echo " "
	echo "Usage:  ebf fmanager upload [SRC_FILE_PATH] [DST_FILE_PATH]"
	echo ""
	echo "Example: "
	echo "    ebf fmanager upload /tmp/file1.txt admin/"
	echo ""
	echo "Description"
	echo "    Upload a file to EBF-FileManager Directory or Sub-Directory"
	echo " "
	exit 1
}

function help_fmanager_download() {
	echo " "
	echo "Usage:  ebf fmanager download [SRC_FILE_PATH] [DST_FILE_PATH]"
	echo ""
	echo "Example: "
	echo "    ebf fmanager download /tmp/file1.txt admin/"
	echo ""
	echo "Description"
	echo "    Download a file from EBF-FileManager to Local Machine"
	echo " "
	exit 1
}

function help_device_uboot_flash() {
	echo " "
	echo "Usage:   ebf <device name> uboot flash -f <uboot file path> -p<xmodem/ymodem/zmodem>"
	echo ""
	echo "Description:"
	echo "     For flashing u-bbot ino a device using serial connection through Xmodem/Ymodem/Zmodem"
	echo ""
	echo "Usage Example:"
	echo "         ebf bbb01 uboot flash -f /tmp/uboot.bin -p ymodem"
	exit 1
}


function user_authentication() {
  LOGIN=0
  check_dependencies
  if [ "$OPTION" == "login" ];then
    if [ -f ~/.ebfconfig ];then
      USER_NAME=$(cat ~/.ebfconfig |grep "username"|cut -d ":" -f2)
      SERVER_URL=$(cat ~/.ebfconfig |grep "server"|cut -d ":" -f2-)
      if [ $USER_NAME ];then
        echo "Already configured for user \"$USER_NAME\" and EBF-Server \"$SERVER_URL\""
        read -r -p "Do you want to Login with a different User? [Y/N] " response
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
        then
          LOGIN=1
        fi
      fi
    else
      LOGIN=1
    fi
  fi

  if [ $LOGIN -eq 1 ];then
    if [ $SERVER_URL ];then
      read -r -p "Do you want to Change EBF-Server URL \"$SERVER_URL\"? [Y/N] " response
      if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]];then
        read -r -p "Provide the EBF Server URL >> " SERVER_URL
        read -r -p "Provide the EBF UserName >> " USER_NAME
        read -s -p "Provide the EBF User Password >> " PASSWORD
				echo ""
      else
        read -r -p "Provide the EBF User Name >> " USER_NAME
        read -s -p "Provide the EBF User Password >> " PASSWORD
				echo ""
      fi
    else
      read -r -p "Provide the EBF Server URL >> " SERVER_URL
      read -r -p "Provide the EBF User Name >> " USER_NAME
      read -s -p "Provide the EBF User Password >> " PASSWORD
			echo ""
    fi
    if [[ "${USER_NAME}" != "" && "${PASSWORD}" != "" && "{$SERVER_URL}" != "" ]];then
      OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/token/"  --header 'Content-Type: application/json' --data-raw '{"username":"'"$USER_NAME"'" , "password":"'"$PASSWORD"'"}')
      AUTH_TOKEN=$(echo $OUTPUT|jq -r .data.token)
			RESULT=$(echo $OUTPUT|jq -r .result)
			if [ "$RESULT" == "success" ];then
    		if [ "$AUTH_TOKEN" != "null" ];then
        	echo "token:$AUTH_TOKEN" > ~/.ebfconfig
        	echo "username:$USER_NAME" >> ~/.ebfconfig
        	echo "server:$SERVER_URL" >> ~/.ebfconfig
        	echo "Successfully logged in as user $USER_NAME"
      	else
        	echo "[ERROR] Invalid EBF-Server URL or Credentials"
        	exit 1
      	fi
			else
				MESSAGE=$(echo $OUTPUT|jq -r .message)
				echo "[ERROR]: Couldn't login Please check the EBF-Server URL or Credentials."
				echo " $MESSAGE"
				exit 1
			fi
    else
      echo "[ERROR] Invalid server URL or credentials"
      exit 1
    fi
  else
    USER_NAME=$(cat ~/.ebfconfig 2> /dev/null |grep "username"|cut -d ":" -f2)
    AUTH_TOKEN=$(cat ~/.ebfconfig 2> /dev/null |grep "token"|cut -d ":" -f2)
    SERVER_URL=$(cat ~/.ebfconfig 2> /dev/null |grep "server"|cut -d ":" -f2-)
		if [[ "${USER_NAME}" == "" || "${AUTH_TOKEN}" == "" || "{$SERVER_URL}" == "" ]];then
			echo "[Error] Invalid credentials, Please login again"
			exit 1
		fi
  fi
}

function list_config(){
    user_authentication
    echo " UserName:       $USER_NAME"
    echo " BFC-SERVER:     $SERVER_URL"
    echo " BFC AUTH-Token: $AUTH_TOKEN"
}

function list_devices() {
  user_authentication
  COUNT=0
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/"  --header 'Authorization: token '$AUTH_TOKEN'')
	RESULT=$(echo $OUTPUT|jq -r .result)
	device=$(echo $OUTPUT|jq -r .data[$COUNT])
	if [ "$RESULT" == "success" ];then
		while [ "$device" != "null" ];
		do
     COUNT=`expr $COUNT + 1`
		 echo "$COUNT $device"
		 device=$(echo $OUTPUT|jq -r .data[$COUNT])
    done
	else
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
		exit 1
	fi
}

function mydevices() {
  user_authentication
  COUNT=0
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/mine/"  --header 'Authorization: token '$AUTH_TOKEN'')
	RESULT=$(echo $OUTPUT|jq -r .result)
	device=$(echo $OUTPUT|jq -r .data[$COUNT])
	if [ "$RESULT" == "success" ];then
		if [ "$device" == "null" ];then
			echo "Currently No Device is assigned to User \"$USER_NAME\""
			exit 1
		else
			while [ "$device" != "null" ];
			do
     		COUNT=`expr $COUNT + 1`
		 		echo "$COUNT. $device"
		 		device=$(echo $OUTPUT|jq -r .data[$COUNT])
    	done
		fi
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		echo $MESSAGE
		exit 1
	fi
}

function device_status() {
  user_authentication
  DEVICE=$OPTION
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE"  --header 'Authorization: token '$AUTH_TOKEN'')
	RESULT=$(echo $OUTPUT|jq -r .result)
	MESSAGE=$(echo $OUTPUT|jq -r .message)
  ASSIGNED_INFO=$(echo $OUTPUT|jq -r .data.AssignedTo)
	if [ "$RESULT" == "success" ];then
  	if [ "$ASSIGNED_INFO" == "" ];then
    	echo "Device \"$DEVICE\" is free"
  	else
    	echo "Device \"$DEVICE\" is assigned to user \"$ASSIGNED_INFO\""
  	fi
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
		else
			echo $MESSAGE
		fi
		exit 1
	fi
}

function device_allocate() {
  user_authentication
  DEVICE=$OPTION
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/assign"  --header 'Authorization: token '$AUTH_TOKEN'')
  RESULT=$(echo $OUTPUT|jq -r .result)
  if [ "$RESULT" == "success" ];then
    echo "Device is assigned to user \"$USER_NAME\""
  else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
			exit 1
		else
			echo $MESSAGE
		fi
		exit 1
  fi
}

function device_release() {
  user_authentication
  DEVICE=$OPTION
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/release"  --header 'Authorization: token '$AUTH_TOKEN'')
  RESULT=$(echo $OUTPUT|jq -r .result)
  if [ "$RESULT" == "success" ];then
    echo "Device \"$DEVICE\" is released and available to use."
  else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
			exit 1
		else
			echo $MESSAGE
			echo ""
			echo "Use option \"force\" if this device assigned to Other User. "
			echo "e.g: ebf <device name> release force"
		fi
		exit 1
  fi
}

function device_release_force() {
  user_authentication
  DEVICE=$OPTION
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/release/force"  --header 'Authorization: token '$AUTH_TOKEN'')
  RESULT=$(echo $OUTPUT|jq -r .result)
  if [ "$RESULT" == "success" ];then
		echo "Device \"$DEVICE\" is Released and available to Use."
  else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
			exit 1
		else
			echo $MESSAGE
		fi
		exit 1
  fi
}

function device_info() {
  user_authentication
  DEVICE=$OPTION
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE"  --header 'Authorization: token '$AUTH_TOKEN'')
  HOSTNAME=$(echo $OUTPUT|jq -r .data.Hostname)
	RESULT=$(echo $OUTPUT|jq -r .result)
	if [ "$RESULT" == "success" ];then
    if [ "$HOSTNAME" != "" ];then
      DEVICE_PORT=$(echo $OUTPUT|jq -r .data.lab.Zombie.DevicePort)
      IOCX_STATUS=$(echo $OUTPUT|jq -r .data.lab.IOCXConnected)
      ZOMBIE_NAME=$(echo $OUTPUT|jq -r .data.lab.Zombie.Hostname)
      ZOMBIE_IP=$(echo $OUTPUT|jq -r .data.lab.Zombie.IPAddress)
      ZOMBIE_URL=$(echo $OUTPUT|jq -r .data.lab.Zombie.URL)
      POWER_SWITCH_NAME=$(echo $OUTPUT|jq -r .data.lab.Power.PowerSwitch)
      POWER_SWITCH_PORT=$(echo $OUTPUT|jq -r .data.lab.Power.PowerSwitchPort)
      POWER_SWITCH_COMMANDS=( $(echo $OUTPUT|jq -r '.data.PowerCommands[]') )
      NETWORK_TFTP_DIR=$(echo $OUTPUT|jq -r '.data.lab.NetworkBoot."TFTP Boot Directory"')
      NETWORK_NFS_DIR=$(echo $OUTPUT|jq -r '.data.lab.NetworkBoot."NFS Root Directory"')
      echo " "
      echo "            ************************  "
      echo "            *  Device Information  *  "
      echo "            ************************  "
      echo " "
      echo " Hostname:                 $HOSTNAME"
      echo " Device Port:              $DEVICE_PORT"
      echo " IOCX Status:              $IOCX_STATUS"
      echo " Zombie Name:              $ZOMBIE_NAME"
      echo " Zombie IP:                $ZOMBIE_IP"
      echo " ZOMBIE_URL:               $ZOMBIE_URL"
      echo " Powe Switch:              $POWER_SWITCH_NAME"
      echo " Power Switch Port:        $POWER_SWITCH_PORT"
      echo " Power Switch Commands:    ${POWER_SWITCH_COMMANDS[@]}"
      echo " TFTP DIR:                 $NETWORK_TFTP_DIR"
      echo " NFS DIR:                  $NETWORK_NFS_DIR"
      echo " "
    else
      echo "[ERROR] NO information found for Device \"$DEVICE\""
      exit 1
    fi
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
		else
			echo $MESSAGE
		fi
		exit 1
  fi
}

function power_status() {
  user_authentication
  DEVICE=$OPTION
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/power"  --header 'Authorization: token '$AUTH_TOKEN'')
  RESULT=$(echo $OUTPUT|jq -r .result)
  STATUS=$(echo $OUTPUT|jq -r .data)
  if [ "$RESULT" == "success" ];then
		if [ "$STATUS" == "" ];then
    	echo "[ERROR] Couldn't access power STATUS for device \"$DEVICE\""
    	exit 1
  	fi
		STATUS=$(echo $STATUS | tr 'a-z' 'A-Z')
    echo "Device \"$DEVICE\" is Powered \"$STATUS\""
  else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
		else
			echo $MESSAGE
		fi
		exit 1
	fi
}

function power_command() {
  user_authentication
  DEVICE=$OPTION
	POWER_COMMAND="$OPTION3"
  OUTPUT=$(curl -s -k --location --request PUT "$SERVER_URL/api/v0.2/devices/$DEVICE/power/$POWER_COMMAND"  --header 'Authorization: token '$AUTH_TOKEN'')
  RESULT=$(echo $OUTPUT|jq -r .result)
  if [ "$RESULT" == "success" ];then
    echo "Device \"$DEVICE\" is Powered \"$POWER_COMMAND\""
  else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
			exit 1
		fi
		if [ "$MESSAGE" ];then
    	echo "$MESSAGE"
		else
			echo "[ERROR] Couldn't access Power status for device \"$DEVICE\""
		fi
    exit 1
  fi
}

function sdmux_hotplug() {
  user_authentication
  DEVICE=$OPTION
	HOTPLUG_PORT=$OPTION3
	COMMAND=$OPTION4
  if [ "$COMMAND" == "status" ];then
    OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/hotplug/$HOTPLUG_PORT/"  --header 'Authorization: token '$AUTH_TOKEN'')
	else
    OUTPUT=$(curl -s -k --location --request PUT "$SERVER_URL/api/v0.2/devices/$DEVICE/hotplug/$HOTPLUG_PORT/$COMMAND/"  --header 'Authorization: token '$AUTH_TOKEN'')
  fi
    RESULT=$(echo $OUTPUT|jq -r .result)
    STATUS=$(echo $OUTPUT|jq -r .data)
    if [ "$RESULT" == "success" ] && [ "$STATUS" != "null" ];then
      if [ "$COMMAND" == "status" ];then
        echo "Device \"$DEVICE\" Hotplug port \"$HOTPLUG_PORT\" is currently \"$STATUS\""
      else
        echo "Device \"$DEVICE\" Hotplug port \"$HOTPLUG_PORT\" is switched \"$STATUS\""
      fi
    else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
				exit 1
			fi
			if [ "$COMMAND" == "status" ];then
				echo "[ERROR] Couldn't fetch the status of Hotplug Port \"$HOTPLUG_PORT\""
			else
      	echo "[ERROR] Couldn't switch Hotplug port to \"$COMMAND\""
			fi
      exit 1
    fi
}

function portfw_list() {
  user_authentication
  DEVICE=$OPTION
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/portfw/nat/"  --header 'Authorization: token '$AUTH_TOKEN'')
	COUNT=0
	RESULT=$(echo $OUTPUT|jq -r .result)
  PORT_LIST=$(echo $OUTPUT|jq -r .data[$COUNT])
	if [ "$RESULT" == "success" ] && [ "$PORT_LIST" != "null" ];then
  	while [ "$PORT_LIST" != "null" ];
  	do
			COUNT=`expr $COUNT + 1`
    	echo "Rule $COUNT"
    	echo " Device IP: $(echo $PORT_LIST|jq -r .dip)"
    	echo " Zombie Protocol: $(echo $PORT_LIST|jq -r .prot)"
    	echo " Zombie Port: $(echo $PORT_LIST|jq -r .zport)  -->  Device Port: $(echo $PORT_LIST|jq -r .dport)"
    	echo " "
    	PORT_LIST=$(echo $OUTPUT|jq -r .data[$COUNT])
  	done
	elif [ "$RESULT" == "success" ] && [ "$PORT_LIST" == "null" ];then
		echo "No IP Forward rule found for device \"$DEVICE\""
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
		else
			echo $MESSAGE
		fi
		exit 1
	fi
}

function portfw_add() {
  user_authentication
  DEVICE=$OPTION
	DEVICE_IP=$OPTION4
	DUT_PORT=$OPTION5
	ZOMBIE_PORT=$OPTION6
	PROTOCOL=$OPTION7
	if [ "$OPTION8" == "" ] && [ "$PROTOCOL" != "" ];then
  	OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/portfw/nat/"  --header 'Content-Type: application/json' --header 'Authorization: token '$AUTH_TOKEN'' --data-raw '{ "device_ip":"'"$DEVICE_IP"'", "dut_port":"'"$DUT_PORT"'", "zombie_port":"'"$ZOMBIE_PORT"'", "pcol":"'"$PROTOCOL"'" }')
  	RESULT=$(echo $OUTPUT|jq -r .result)
	else
		help_device_portfw_add
		exit 1
	fi
  if [ "$RESULT" == "success" ];then
    echo "Successfully Forwarded the port"
  else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
		else
    	echo "[ERROR]: Couldn't forward port"
			echo $MESSAGE
			exit 1
		fi
  fi
}

function portfw_remove() {
  user_authentication
  DEVICE=$OPTION
  COUNT=0
	DEVICE_IP=$OPTION4
	DUT_PORT=$OPTION5
	ZOMBIE_PORT=$OPTION6
	PROTOCOL=$OPTION7
	if [ "$OPTION8" == "" ] && [ "$PROTOCOL" != "" ];then
  	OUTPUT=$(curl -s -k --location --request DELETE "$SERVER_URL/api/v0.2/devices/$DEVICE/portfw/nat/"  --header 'Content-Type: application/json' --header 'Authorization: token '$AUTH_TOKEN'' --data-raw '{ "device_ip":"'"$DEVICE_IP"'", "dut_port":"'"$DUT_PORT"'", "zombie_port":"'"$ZOMBIE_PORT"'", "pcol":"'"$PROTOCOL"'" }')
  	RESULT=$(echo $OUTPUT|jq -r .result)
	else
		help_device_portfw_remove
		exit 1
	fi

	if [ "$RESULT" == "success" ];then
		echo "Successfully Deleted the port forwarded rule"
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
		else
    	echo "[ERROR]: No port forward rule found"
			echo $MESSAGE
			exit 1
		fi
	fi
}

function execute_serial_command() {
  user_authentication
  DEVICE=$OPTION
	DEVICE_COMMAND=$OPTION4
	if [ "$DEVICE_COMMAND" != "" ];then
		DEVICE_COMMAND=$(jq -aRs . <<< $DEVICE_COMMAND)
		DEVICE_COMMAND=${DEVICE_COMMAND#\"}
		DEVICE_COMMAND=${DEVICE_COMMAND%\"}
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/run/serial/"  --header 'Content-Type: application/json' --header 'Authorization: token '$AUTH_TOKEN'' --data-raw '{ "command": "'"$DEVICE_COMMAND"'" }')
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			DATA=$(echo $OUTPUT|jq -r .data[])
			echo $DATA
	 else
		 if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		 fi
		 MESSAGE=$(echo $OUTPUT|jq -r .message)
		 FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		 if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
		 else
			echo $MESSAGE
			exit 1
		 fi
	 fi
	else
		echo "[ERROR] Command shouldn't be empty"
		help_device_serial_run
		exit 1
	 fi
}

function serial_download() {
	user_authentication
  DEVICE=$OPTION
  SRC_FILE_PATH=${OPTION4%/}
	SRC_FILE_DIR=${SRC_FILE_PATH%/*}
	FILE_NAME=${SRC_FILE_PATH##*/}
	DST_FILE_PATH=${OPTION5%/}
	TMP_DIR=$(mktemp -d)
	if [ ! -d "$DST_FILE_PATH" ];then
		PARENT_DST_FILE_PATH=${DST_FILE_PATH%/*}
		if [ ! -d "$PARENT_DST_FILE_PATH" ];then
		 echo "[ERROR] Destination download path is not Valid!"
		 help_device_serial_download
		 exit 1
		fi
	else
		DST_FILE_PATH="$DST_FILE_PATH"
	fi
  if [ "$SRC_FILE_PATH" != "" ];then
    OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/download/serial?compress=true&path=$SRC_FILE_PATH" --header 'Authorization: token '$AUTH_TOKEN'' --output ${TMP_DIR}/$FILE_NAME.tar.gz )
		tar -xf ${TMP_DIR}/$FILE_NAME.tar.gz -C ${TMP_DIR} 2>/dev/null && cp -rf ${TMP_DIR}${SRC_FILE_DIR}/* $DST_FILE_PATH 2>/dev/null
		if [ $? -eq 0 ];then
			echo "Successfully Downloaded \"$FILE_NAME\" into \"$DST_FILE_PATH\""
			rm -rf $TMP_DIR
		else
			echo "[ERROR] Couldn't download \"$FILE_NAME\" whether the file exsist or not"
			rm -rf $TMP_DIR
			help_device_serial_download
			exit 1
		fi
  else
		help_device_serial_download
		rm -rf $TMP_DIR
    echo "FILE_PATH shouldn't be empty"
    exit 1
  fi
}

function serial_upload() {
	user_authentication
  DEVICE=$OPTION
	SRC_FILE_PATH=$OPTION4
	DST_FILE_PATH=${OPTION5}
	FILE_PERMISSIONS=${OPTION6}
  if [ -f $SRC_FILE_PATH ];then
		if [ "$FILE_PERMISSIONS" != "" ];then
			OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/upload/serial/" --header 'Authorization: token '$AUTH_TOKEN'' --form 'file=@'$SRC_FILE_PATH'' --form 'path='$DST_FILE_PATH'' --form 'permission='$FILE_PERMISSIONS'' )
		else
    	OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/upload/serial/" --header 'Authorization: token '$AUTH_TOKEN'' --form 'file=@'$SRC_FILE_PATH'' --form 'path='$DST_FILE_PATH'' )
		fi
	elif [ -d $SRC_FILE_PATH ];then
		TMP_DIR=$(mktemp -d)
		SRC_FILE_PATH="$(realpath ${SRC_FILE_PATH})"
		SRC_FILE_PATH=${SRC_FILE_PATH%/}
		DIR_PATH=${SRC_FILE_PATH%/*}
	  DIR_NAME=${SRC_FILE_PATH##*/}
		tar -czf $TMP_DIR/$DIR_NAME.tar.gz -C $DIR_PATH $DIR_NAME
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/upload/serial/" --header 'Authorization: token '$AUTH_TOKEN'' --form 'file=@'$TMP_DIR/$DIR_NAME.tar.gz'' --form 'path='$DST_FILE_PATH'' --form 'extract=true' )
		rm -rf $TMP_DIR
	else
		help_device_serial_upload
    echo "[ERROR]: Please provide a valid File Path"
    exit 1
  fi
	RESULT=$(echo $OUTPUT|jq -r .result)
	MESSAGE=$(echo $OUTPUT|jq -r .message)
	if [ "$RESULT" == "success" ];then
		echo ""
		echo "Successfully uploaded \"$DIR_NAME\""
	else
		if [ "$RESULT" == "" ];then
		 echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
		 exit 1
		fi
		echo ""
		echo "[ERROR]: $MESSAGE"
		exit 1
	fi
}

function ssh_import_key() {
	user_authentication
  DEVICE=$OPTION
	DEVICE_IP=$OPTION4
	DEVICE_USERNAME=$OPTION5
	DEVICE_PASSWORD=$OPTION6
	JSON_STRING="--form device_ip=$DEVICE_IP --form username=$DEVICE_USERNAME --form password=$DEVICE_PASSWORD"
	OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/import/key/ssh/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
	RESULT=$(echo $OUTPUT|jq -r .result)
	MESSAGE=$(echo $OUTPUT|jq -r .message)
	if [ "$RESULT" == "success" ];then
		echo "Successfully Zombie SSH-KEY Imported to \"$DEVICE\""
		if cat  ~/.ebfconfig | grep ^"$DEVICE:IP" >/dev/null; then
			OLD_DEVICE_IP=$(cat ~/.ebfconfig|grep $DEVICE:IP|cut -d ':' -f3)
			OLD_USERNAME=$(cat ~/.ebfconfig|grep $DEVICE:USERNAME|cut -d ':' -f3)
			sed -i "s/$DEVICE:IP:$OLD_DEVICE_IP/$DEVICE:IP:$DEVICE_IP/gi" ~/.ebfconfig
			sed -i "s/$DEVICE:USERNAME:$OLD_USERNAME/$DEVICE:USERNAME:$DEVICE_USERNAME/gi" ~/.ebfconfig
		else
			echo "$DEVICE:IP:$DEVICE_IP" >> ~/.ebfconfig
			echo "$DEVICE:USERNAME:$DEVICE_USERNAME" >> ~/.ebfconfig
		fi
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
		exit 1
	fi

}

function execute_ssh_command() {
  user_authentication
  DEVICE=$OPTION
  DEVICE_COMMAND=$OPTION4
  if [ "$DEVICE_COMMAND" != "" ];then
		DEVICE_COMMAND=$(jq -aRs . <<< $DEVICE_COMMAND)
		DEVICE_COMMAND=${DEVICE_COMMAND#\"}
		DEVICE_COMMAND=${DEVICE_COMMAND%\"}
		DEVICE_IP=$(cat ~/.ebfconfig|grep $DEVICE:IP|cut -d ':' -f3)
		DEVICE_USERNAME=$(cat ~/.ebfconfig|grep $DEVICE:USERNAME|cut -d ':' -f3)
		if [ "$DEVICE_IP" == "" ] || [ "$DEVICE_USERNAME" == "" ];then
			echo "No SSH-KEY is found for device \"$DEVICE\", Please import key first"
			help_device_ssh_import_key
			exit 1
		fi
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/run/ssh/"  --header 'Content-Type: application/json' --header 'Authorization: token '$AUTH_TOKEN'' --data-raw '{ "command": "'"$DEVICE_COMMAND"'", "device_ip":"'"$DEVICE_IP"'", "username":"'"$DEVICE_USERNAME"'" }')
		RESULT=$(echo $OUTPUT|jq -r .result)
		RETURN_CODE=$(echo $OUTPUT|jq -r .data.return_code)
    if [ "$RESULT" == "success" ];then
      COUNT=0
      DATA=$(echo $OUTPUT|jq -r .data.data[$COUNT])
      while [ "$DATA" != "null" ];
      do
				COUNT=`expr $COUNT + 1`
				echo $DATA
				DATA=$(echo $OUTPUT|jq -r .data.data[$COUNT])
			done
			return $RETURN_CODE
	 else
		 if [ "$RESULT" == "" ];then
 			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
 			exit 1
 		 fi
		 MESSAGE=$(echo $OUTPUT|jq -r .message)
 		 FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
 		 if [ "$FAILURE_MSG" ];then
 		 	echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
 		 else
 		 	echo $MESSAGE
 			exit 1
 		 fi
	 fi
	else
		echo "[ERROR] Command shouldn't be empty"
		help_device_ssh_run
		exit 1
	 fi
}

function ssh_download() {
	user_authentication
  DEVICE=$OPTION
	DEVICE_IP=$(cat ~/.ebfconfig|grep $DEVICE:IP|cut -d ':' -f3)
	DEVICE_USERNAME=$(cat ~/.ebfconfig|grep $DEVICE:USERNAME|cut -d ':' -f3)
	if [ "$DEVICE_IP" == "" ] || [ "$DEVICE_USERNAME" == "" ];then
		echo "No SSH-KEY is found for device \"$DEVICE\", Please import key first"
		help_device_ssh_import_key
		exit 1
	fi
  SRC_FILE_PATH=${OPTION4%/}
	SRC_FILE_DIR=${SRC_FILE_PATH%/*}
	FILE_NAME=${SRC_FILE_PATH##*/}
	DST_FILE_PATH=${OPTION5%/}
	TMP_DIR=$(mktemp -d)
	if [ ! -d "$DST_FILE_PATH" ];then
		PARENT_DST_FILE_PATH=${DST_FILE_PATH%/*}
		if [ ! -d "$PARENT_DST_FILE_PATH" ];then
		 echo "[ERROR] Destination download path is not Valid!"
		 help_device_ssh_download
		 exit 1
		fi
	else
		DST_FILE_PATH="$DST_FILE_PATH"
	fi
  if [ "$SRC_FILE_PATH" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/download/ssh?compress=true&path=$SRC_FILE_PATH&device_ip=$DEVICE_IP&username=$DEVICE_USERNAME" --header 'Authorization: token '$AUTH_TOKEN'' --output ${TMP_DIR}/$FILE_NAME.tar.gz )
		tar -xf ${TMP_DIR}/$FILE_NAME.tar.gz -C ${TMP_DIR} 2>/dev/null && rm -rf ${TMP_DIR}/$FILE_NAME.tar.gz && cp -rf ${TMP_DIR}${SRC_FILE_DIR}/* $DST_FILE_PATH 2>/dev/null
		if [ $? -eq 0 ];then
			echo "Successfully Downloaded \"$FILE_NAME\" into \"$DST_FILE_PATH\""
			rm -rf $TMP_DIR
		else
			echo "[ERROR] Couldn't download \"$FILE_NAME\" whether the file exsist or not"
			rm -rf $TMP_DIR
			help_device_ssh_download
			exit 1
		fi
  else
		help_device_ssh_download
		rm -rf $TMP_DIR
    echo "FILE_PATH shouldn't be empty"
    exit 1
  fi
}

function ssh_upload() {
  user_authentication
  DEVICE=$OPTION
	JSON_STRING=""
	SRC_FILE_PATH=$OPTION4
	DST_FILE_PATH=${OPTION5}
	FILE_PERMISSIONS=${OPTION6}
	DEVICE_IP=$(cat ~/.ebfconfig|grep $DEVICE:IP|cut -d ':' -f3)
	DEVICE_USERNAME=$(cat ~/.ebfconfig|grep $DEVICE:USERNAME|cut -d ':' -f3)
	if [ "$DEVICE_IP" == "" ] || [ "$DEVICE_USERNAME" == "" ];then
		echo "No SSH-KEY is found for device \"$DEVICE\", Please import key first"
		help_device_ssh_import_key
		exit 1
	fi
  if [ -f $SRC_FILE_PATH ];then
		if [ -z "$FILE_PERMISSIONS" ]; then
		  FILE_PERMISSIONS=$(stat -c '%a' $SRC_FILE_PATH)
	  fi
		if [ "$FILE_PERMISSIONS" != "" ];then
			JSON_STRING="--form file=@$SRC_FILE_PATH --form path=$DST_FILE_PATH --form device_ip=$DEVICE_IP --form username=$DEVICE_USERNAME --form permission=$FILE_PERMISSIONS"
			OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/upload/ssh/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
		else
			JSON_STRING="--form file=@$SRC_FILE_PATH --form path=$DST_FILE_PATH --form device_ip=$DEVICE_IP --form username=$DEVICE_USERNAME"
    	OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/upload/ssh/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
		fi
	elif [ -d $SRC_FILE_PATH ];then
		TMP_DIR=$(mktemp -d)
		SRC_FILE_PATH="$(realpath ${SRC_FILE_PATH})"
		SRC_FILE_PATH=${SRC_FILE_PATH%/}
		DIR_PATH=${SRC_FILE_PATH%/*}
	  DIR_NAME=${SRC_FILE_PATH##*/}
		tar -czf $TMP_DIR/$DIR_NAME.tar.gz -C $DIR_PATH $DIR_NAME
		JSON_STRING="--form file=@$TMP_DIR/$DIR_NAME.tar.gz --form path=$DST_FILE_PATH --form device_ip=$DEVICE_IP --form username=$DEVICE_USERNAME --form extract=true )"
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/upload/ssh/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
		rm -rf $TMP_DIR
	else
		help_device_ssh_upload
    echo "[ERROR]: Please provide a valid File Path"
    exit 1
  fi
	RESULT=$(echo $OUTPUT|jq -r .result)
	MESSAGE=$(echo $OUTPUT|jq -r .message)
	if [ "$RESULT" == "success" ];then
		echo ""
		echo "Successfully uploaded \"${SRC_FILE_PATH##*/}\""
	else
		if [ "$RESULT" == "" ];then
		 echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
		 exit 1
		fi
		echo ""
		echo "[ERROR]: $MESSAGE"
		exit 1
	fi
}

function device_gpio() {
  COMMAND=$OPTION3
  GPIO_PATTERN=$OPTION4
  GPIO_DATA=$OPTION5
  if [ "$COMMAND" == "set_mode" ] || [ "$COMMAND" == "write" ] || [ "$COMMAND" == "read" ] || [ "$COMMAND" == "get_mode" ];then
    if [[ "$GPIO_PATTERN" =~ ^[0-9]+$ ]] && [ "$GPIO_PATTERN" -ge 1 ] && [ "$GPIO_PATTERN" -le 8 ]; then
      echo ""
    else
      echo "[ERROR]: Invalid GPIO Pattern"
      help_device_gpio
      exit 1
    fi
  else
    if [[ "$GPIO_PATTERN" =~ ^[0-9]+$ ]] && [ "$GPIO_PATTERN" -ge 1 ] && [ "$GPIO_PATTERN" -le 255 ]; then
      echo " "
    else
      echo "[ERROR]: Invalid GPIO Pattern"
      help_device_gpio
      exit 1
    fi
  fi

  if [ "$GPIO_PIN_DATA" == "yes" ];then
    if [ "$COMMAND" == "set_mode" ];then
      if [ "$GPIO_DATA" == "read" ] || [ "$GPIO_DATA" == "write" ];then
        echo " "
      else
        echo "[ERROR]: Invalid GPIO data"
        help_device_gpio
        exit 1
      fi
    elif [ "$COMMAND" == "write" ];then
      if [[ "$GPIO_DATA" =~ ^[0-9]+$ ]] && [ "$GPIO_DATA" -ge 0 ] && [ "$GPIO_DATA" -le 1 ]; then
        echo " "
      else
        echo "[ERROR]: Invalid GPIO DATA"
        help_device_gpio
        exit 1
      fi
    else
      if [[ "$GPIO_DATA" =~ ^[0-9]+$ ]] && [ "$GPIO_DATA" -ge 0 ] && [ "$GPIO_DATA" -le 255 ]; then
        echo " "
      else
        echo "[ERROR]: Invalid GPIO DATA"
        help_device_gpio
        exit 1
      fi
    fi
  fi
  user_authentication
  DEVICE=$OPTION
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/gpio/$COMMAND/$GPIO_PATTERN/$GPIO_DATA"  --header 'Authorization: token '$AUTH_TOKEN'')
	RESULT=$(echo $OUTPUT|jq -r .result)
	STATUS=$(echo $OUTPUT|jq -r .status)
  if [ "$RESULT" == "success" ];then
    echo " $STATUS"
	else
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
			echo "[ERROR]: Couldn't execute GPIO command"
		fi
    exit 1
  fi
}

function device_console() {
  user_authentication
  DEVICE=$OPTION
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/console/serial/isactive/"  --header 'Authorization: token '$AUTH_TOKEN'')
	ISACTIVE=$(echo $OUTPUT|jq -r .data.isActive)
  if [ "$ISACTIVE" == "true" ];then
    OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE"  --header 'Authorization: token '$AUTH_TOKEN'')
    DEVICE_PORT=$(echo $OUTPUT|jq -r .data.lab.Zombie.DevicePort)
    ZOMBIE_IP=$(echo $OUTPUT|jq -r .data.lab.Zombie.IPAddress)
    if [ "$ZOMBIE_IP" != "" ] && [ "$DEVICE_PORT" != "" ];then
      sshpass -p "zuser" ssh -t zuser@$ZOMBIE_IP "connect_serial DUT$DEVICE_PORT"
    else
      echo "[ERROR] Couldn't access console for device $DEVICE"
      exit 1
    fi
  else
    OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/console/serial/restart/"  --header 'Authorization: token '$AUTH_TOKEN'')
    OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/console/serial/isactive/"  --header 'Authorization: token '$AUTH_TOKEN'')
    ISACTIVE=$(echo $OUTPUT|jq -r .data.isActive)
    if [ "$ISACTIVE" == "true" ];then
      OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE"  --header 'Authorization: token '$AUTH_TOKEN'')
      DEVICE_PORT=$(echo $OUTPUT|jq -r .data.lab.Zombie.DevicePort)
      ZOMBIE_IP=$(echo $OUTPUT|jq -r .data.lab.Zombie.IPAddress)
      if [ "$ZOMBIE_IP" != "" ] && [ "$DEVICE_PORT" != "" ];then
        sshpass -p "zuser" ssh -t zuser@$ZOMBIE_IP "connect_serial DUT$DEVICE_PORT"
      else
        echo "[ERROR] Couldn't access console for device $DEVICE"
        exit 1
      fi
    else
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
				echo "[ERROR] Couldn't access console STATUS for device $DEVICE"
			fi
      exit 1
    fi
  fi
}

function list_labcontrollers() {
  user_authentication
  DEVICE=$OPTION
	COUNT=0
  OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/labcontrollers/"  --header 'Authorization: token '$AUTH_TOKEN'')
  RESULT=$(echo $OUTPUT|jq -r .result)
	CONTROLLERS_LIST=$(echo $OUTPUT|jq -r .data[$COUNT])
  if [ "$RESULT" == "success" ] && [ $"CONTROLLERS_LIST" != "null" ];then
    while [ "$CONTROLLERS_LIST" != "null" ];
    do
      COUNT=`expr $COUNT + 1`
      echo "Controller : $COUNT"
      echo " ID              : $(echo $CONTROLLERS_LIST|jq -r .id)"
      echo " Controller Type : $(echo $CONTROLLERS_LIST|jq -r .type)"
      echo " "
      CONTROLLERS_LIST=$(echo $OUTPUT|jq -r .data[$COUNT])
    done
	elif [ "$RESULT" == "success" ] && [ $"CONTROLLERS_LIST" == "null" ]; then
		echo "No labcontroller found for device $DEVICE"
  else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
    exit 1
  fi
}

function list_netboot_directory() {
	user_authentication
	DEVICE=$OPTION
	DIR_PATH_OPTIONAL=$OPTION4
	COUNT=0
	if [ "$DIR_PATH_OPTIONAL" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/fmanager/dir/$DIR_PATH_OPTIONAL"  --header 'Authorization: token '$AUTH_TOKEN'')
	else
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/fmanager/"  --header 'Authorization: token '$AUTH_TOKEN'')
	fi
	RESULT=$(echo $OUTPUT|jq -r .result)
	LIST_DATA=$(echo $OUTPUT|jq -r .data[$COUNT])
	if [ "$RESULT" == "success" ] && [ "$LIST_DATA" != "null" ];then
		while [ "$LIST_DATA" != "null" ];
		do
			FILE_OR_DIR_NAME=$(echo $LIST_DATA|jq -r .file_or_dir_name)
			SIZE=$(echo $LIST_DATA|jq -r .size)
			TYPE=$(echo $LIST_DATA|jq -r .type)
			OWNER=$(echo $LIST_DATA|jq -r .owner)
			DATE=$(echo $LIST_DATA|jq -r .modified_date)
			SYMLINK_TARGET=$(echo $LIST_DATA|jq -r .symlink_target)
			COUNT=`expr $COUNT + 1`
			LIST_DATA=$(echo $OUTPUT|jq -r .data[$COUNT])
			printf "%-30s %-10s %-12s %-8s %-15s %-15s \n" "$FILE_OR_DIR_NAME" "$TYPE" "$OWNER" "$SIZE" "$DATE" "$SYMLINK_TARGET"
		done
	elif [ "$RESULT" == "success" ] && [ "$LIST_DATA" == "null" ];then
		echo "Directory is Empty"
		exit 1
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
    exit 1
	fi
}

function mkdir_netboot_directory() {
	user_authentication
	DEVICE=$OPTION
	DIR_PATH=$OPTION4
	if [ `expr "$DIR_PATH" : ".*[A-Za-z0-9.()~!@$^&+={};-].*"` -gt 0 ]; then
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/fmanager/dir/$DIR_PATH/"  --header 'Authorization: token '$AUTH_TOKEN'')
	else
    echo "[ERROR] Directory Name contains special characters"
		exit 1
	fi
	RESULT=$(echo $OUTPUT|jq -r .result)
	MESSAGE=$(echo $OUTPUT|jq -r .message)
	if [ "$RESULT" == "success" ];then
			echo "Successfully Directory $MESSAGE"
			exit 0
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
    exit 1
	fi
}

function delete_netboot_directory() {
	user_authentication
	DEVICE=$OPTION
	DIR_PATH=$OPTION4
	OUTPUT=$(curl -s -k --location --request DELETE "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/fmanager/dir/$DIR_PATH"  --header 'Authorization: token '$AUTH_TOKEN'')
	RESULT=$(echo $OUTPUT|jq -r .result)
	MESSAGE=$(echo $OUTPUT|jq -r .message)
	if [ "$RESULT" == "success" ];then
			echo "Successfully Directory $MESSAGE"
			exit 0
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
    exit 1
	fi
}

function netboot_transfer() {
	user_authentication
	DEVICE=$OPTION
	OPERATION=$OPTION4
	NETBOOT_JOB_ID=$OPTION5
	FILE_PATH=""
	TOOL=""
	EXTRACTION_DIR=""
	CMD_ARGS=""
	REMOVE_AFTER=""
	JSON_STRING=""
	while [ "$1" != "" ];
	do
	   case $1 in
			-f | --file )
			 		FILE_PATH=$2
					shift
					;;
	    -t | --tool )
	        TOOL=$2
					if [ "$TOOL" != "tar" ] && [ "$TOOL" != "unzip" ] && [ "$TOOL" != "cp" ];then
						help_device_netboot_transfer
						exit 1
					fi
	        shift
	        ;;
	    -d | --dir )
	        EXTRACTION_DIR=$2
	        shift
	        ;;
	    -a | --cmd-args )
	        CMD_ARGS=$2
	        shift
	        ;;
	    -r | --remove-after )
	        REMOVE_AFTER=$(echo $2| tr 'A-Z' 'a-z')
					if [ "$REMOVE_AFTER" != "on" ] && [ "$REMOVE_AFTER" != "off" ];then
						help_device_netboot_transfer
						exit 1
					fi
	        shift
	        ;;
	     * )
	        help_device_netboot_transfer
					exit 1
	      ;;
	  esac
	  shift
	done
	if [ "$OPERATION" != "local" ] && [ "$OPERATION" != "server" ] && [ "$OPERATION" != "status" ];then
		echo ""
		echo "[ERROR] Please provide the file location whether it is present in local or server"
		help_device_netboot_transfer
		exit 1
	fi
	if [ "$FILE_PATH" != "" ] && [ -f $FILE_PATH ] && [ "$OPERATION" == "local" ];then
		if [ "$JSON_STRING" == "" ];then
			 JSON_STRING="--form file=@$FILE_PATH"
		fi
		if [ "$EXTRACTION_DIR" != "" ];then
			JSON_STRING="${JSON_STRING}  --form extraction_dir=${EXTRACTION_DIR}"
		fi
		if [ "$TOOL" != "" ];then
			if [ "$TOOL" == "cp" ] && [ "$EXTRACTION_DIR" != "" ];then
				echo "[ERROR] You cann't provide extraction directory with cp tool"
				exit 1
			else
				JSON_STRING="${JSON_STRING}  --form  transferring_tool=${TOOL}"
			fi
		fi
		if [ "$REMOVE_AFTER" != "" ];then
			JSON_STRING="${JSON_STRING}  --form delete_after=${REMOVE_AFTER}"
		fi
		if [ "$CMD_ARGS" != "" ];then
			JSON_STRING="${JSON_STRING}  --form cmd_args=${CMD_ARGS}"
		fi
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/transfer/file/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			JOB_ID=$(echo $OUTPUT|jq -r .data.job_id)
			PROGRESS_URL=$(echo $OUTPUT|jq -r .data.progress_url)
			echo "JOB-ID :       $JOB_ID"
			echo "PROGRESS_URL : $PROGRESS_URL "
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$FILE_PATH" != "" ] && [ "$OPTION4" == "server" ];then
		JSON_STRING=""
		if [ "$JSON_STRING" == "" ];then
			 JSON_STRING="\"file\":\"$FILE_PATH\""
		fi
		if [ "$EXTRACTION_DIR" != "" ];then
			JSON_STRING="${JSON_STRING},\"extraction_dir\":\"${EXTRACTION_DIR}\""
		fi
		if [ "$TOOL" != "" ];then
			if [ "$TOOL" == "cp" ] && [ "$EXTRACTION_DIR" != "" ];then
				echo "[ERROR] You cann't provide extraction directory with cp tool"
				exit 1
			else
				JSON_STRING="${JSON_STRING},\"transferring_tool\":\"${TOOL}\""
			fi
		fi
		if [ "$REMOVE_AFTER" != "" ];then
			JSON_STRING="${JSON_STRING},\"delete_after\":\"${REMOVE_AFTER}\""
		fi
		if [ "$CMD_ARGS" != "" ];then
			JSON_STRING="${JSON_STRING},\"cmd_args\":\"${CMD_ARGS}\""
		fi
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/transfer/file/" --header 'Authorization: token '$AUTH_TOKEN'' --header 'Content-Type: application/json' --data-raw '{'$JSON_STRING'}' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			JOB_ID=$(echo $OUTPUT|jq -r .data.job_id)
			PROGRESS_URL=$(echo $OUTPUT|jq -r .data.progress_url)
			echo "JOB-ID :       $JOB_ID"
			echo "PROGRESS_URL : $PROGRESS_URL "
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "status" ] && [ "$NETBOOT_JOB_ID" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/transfer/file/status/$NETBOOT_JOB_ID" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		JOB_STATUS=$(echo $OUTPUT|jq -r .data.status)
		if [ "$RESULT" == "success" ];then
			if [ "$JOB_STATUS" == "started" ];then
				PROGRESS=$(echo $OUTPUT|jq -r .data.info.progress)
				CURRENT_STATUS=$(echo $OUTPUT|jq -r .data.info.current)
				TRANSFER_STATUS=$(echo $OUTPUT|jq -r .data.info.transfer)
				echo "Progress            :  $PROGRESS%"
				echo "Current Status      :  $CURRENT_STATUS"
				echo "Transfer Status     :  $TRANSFER_STATUS"
			elif [ "$JOB_STATUS" == "queued" ];then
				echo "Netboot transfer Job $NETBOOT_JOB_ID is in queue"
				exit 0
			else
				echo "[ERROR] Couldn't access status of Network upload ID $NETBOOT_JOB_ID"
				exit 1
			fi
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "status" ] && [ "$NETBOOT_JOB_ID" == "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/queue/" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		SCHEDULED_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.scheduled_jobs|jq 'keys[0]')
		CURRENT_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.current_jobs|jq 'keys[0]')
		if [ "$RESULT" == "success" ];then
			echo "Running Upload Job:"
			if [ "$CURRENT_JOB_ID" != "null" ];then
				echo " Job-ID   : $CURRENT_JOB_ID"
			else
				echo " Currently No Upload Job is running"
			fi
			echo ""
			echo "Upload Jobs in Queue:"
			if [ "$SCHEDULED_JOB_ID" != "null" ];then
				while [ "$SCHEDULED_JOB_ID" != "null" ];
				do
					COUNT=`expr $COUNT + 1`
					echo " Job-ID $COUNT : $SCHEDULED_JOB_ID"
					SCHEDULED_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.scheduled_jobs|jq keys["$COUNT"])
				done
			else
				echo " Currently No Upload job is in Queue"
			fi
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "remove" ] && [ "$NETBOOT_JOB_ID" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/transfercancel/$NETBOOT_JOB_ID" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			echo "Successfully canceled Network Boot Upload : $NETBOOT_JOB_ID"
			exit 0
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	else
		echo "[ERROR] Check file/directory \"$FILE_PATH\" whether it exsist or not"
		help_device_netboot_transfer
		exit 1
	fi
}

function netboot_download() {
	user_authentication
  DEVICE=$OPTION
  SRC_FILE_PATH=${OPTION4%/}
	FILE_NAME=${SRC_FILE_PATH##*/}
	DST_FILE_PATH=${OPTION5%/}
	if [ ! -d "$DST_FILE_PATH" ] && [ "$DST_FILE_PATH" != "" ];then
		PARENT_DST_FILE_PATH=${DST_FILE_PATH%/*}
		if [ ! -d "$PARENT_DST_FILE_PATH" ];then
		 echo "[ERROR] Destination download path is not Valid!"
		 help_device_netboot_download
		 exit 1
	  else
			FILE_NAME=$DST_FILE_PATH
		fi
	elif [ -d "$DST_FILE_PATH" ];then
		FILE_NAME="$DST_FILE_PATH/$FILE_NAME"
	else
		FILE_NAME=$FILE_NAME
	fi

  if [ "$SRC_FILE_PATH" != "" ];then
    OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/fmanager/download/$SRC_FILE_PATH/" --header 'Authorization: token '$AUTH_TOKEN'' --output $FILE_NAME )
		if [ $? -eq 0 ];then
			echo "Successfully Downloaded \"$SRC_FILE_PATH\" into \"$FILE_NAME\""
		else
			echo "[ERROR] Couldn't download \"$SRC_FILE_PATH\" , Check whether the file exsist or not"
			help_device_netboot_download
			exit 1
		fi
  else
		echo "[ERROR] Source FileName shouldn't be empty"
		help_device_netboot_download
    exit 1
  fi
}

function netboot_upload() {
	user_authentication
	DEVICE=$OPTION
	SRC_FILE_PATH=$OPTION4
	DST_FILE_PATH=$OPTION5
	JSON_STRING=""
	if [ -f $SRC_FILE_PATH ] && [ "$DST_FILE_PATH" != "" ];then
		JSON_STRING="--form file=@$SRC_FILE_PATH --form path_to_upload_file=$DST_FILE_PATH"
		OUTPUT=$(curl -s -k --location --request PUT "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/fmanager/dir/$DST_FILE_PATH/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
		RESULT=$(echo $OUTPUT|jq -r .result)
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		if [ "$RESULT" == "success" ];then
			echo "Successfully $MESSAGE"
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	else
		if [ "$OPTION2" == "usb" ];then
			help_device_usb_upload
		else
			help_device_sdcard_upload
		fi
		exit 1
	fi
}

function netboot_symlink() {
	user_authentication
	DEVICE=$OPTION
	CREATE_SYMLINK_DIR=$OPTION4
	if [ "$CREATE_SYMLINK_DIR" == "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/fsroot/symlink/" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			SYMLINK_DIR=$(echo $OUTPUT|jq -r .data)
			echo "Current SYMLINK_DIR : $SYMLINK_DIR "
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	else
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/netboot/fsroot/symlink/" --header 'Authorization: token '$AUTH_TOKEN'' --header 'Content-Type: application/json' --data-raw '{ "symlink_dir":"'"$CREATE_SYMLINK_DIR"'" }')
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			echo "Successfully created symlink to directory $CREATE_SYMLINK_DIR"
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
  fi
}

function sdcard_info(){
	user_authentication
	DEVICE=$OPTION
	COUNT=0
	OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/info/"  --header 'Authorization: token '$AUTH_TOKEN'' )
	RESULT=$(echo $OUTPUT|jq -r .result)
	PARTITIONS_DATA=$(echo $OUTPUT|jq -r .data.partitions)
	if [ "$RESULT" == "success" ] && [ "$PARTITIONS_DATA" != "null" ];then
			SD_DEVICE=$(echo $OUTPUT|jq -r .data.device)
			TOTAL_SIZE=$(echo $OUTPUT|jq -r .data.total_size)
			if [ "$OPTION2" == "usb" ];then
				echo "USB Information"
			else
				echo "SD CRAD Information"
			fi
			echo ""
			echo "$SD_DEVICE: $TOTAL_SIZE"
			PARTITIONS_DATA=$(echo $OUTPUT|jq -r .data.partitions[$COUNT])
			while [ "$PARTITIONS_DATA" != "null" ];
			do
				DEV=$(echo $PARTITIONS_DATA|jq -r .dev)
				SIZE=$(echo $PARTITIONS_DATA|jq -r .size)
				FSTYPE=$(echo $PARTITIONS_DATA|jq -r .fstype)
				BOOTABLE=$(echo $PARTITIONS_DATA|jq -r .bootable)
				LABEL=$(echo $PARTITIONS_DATA|jq -r .label)
				COUNT=`expr $COUNT + 1`
				PARTITIONS_DATA=$(echo $OUTPUT|jq -r .data.partitions[$COUNT])
				echo "$DEV: $SIZE ($FSTYPE)"
			done
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
		exit 1
	fi
}

function sdcard_side(){
	user_authentication
	DEVICE=$OPTION
	COUNT=0
	if [ "$OPTION2" == "usb" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/usbmux/"  --header 'Authorization: token '$AUTH_TOKEN'' )
	else
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdmux/"  --header 'Authorization: token '$AUTH_TOKEN'' )
	fi
	RESULT=$(echo $OUTPUT|jq -r .result)
	DATA=$(echo $OUTPUT|jq -r .data)
	if [ "$RESULT" == "success" ];then
		if [ "$OPTION2" == "usb" ];then
			echo "USB is connected to \"$DATA\" side"
		else
			echo "SDCard is connected to \"$DATA\" side"
		fi
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device \"$DEVICE\" doesn't exsist"
		else
			echo $MESSAGE
		fi
		exit 1
	fi
}

function sdcard_switch(){
	user_authentication
	DEVICE=$OPTION
	SWITCH_SIDE=$(echo $OPTION4| tr 'A-Z' 'a-z')
	COUNT=0
	if [ "$OPTION2" == "usb" ];then
		MUX_MODE="usbmux"
		DEVICE_TYPE="USB"
	else
		MUX_MODE="sdmux"
		DEVICE_TYPE="SDCard"
	fi

	if [ "$SWITCH_SIDE" == "side" ];then
		OUTPUT=$(curl -s -k --location --request PUT "$SERVER_URL/api/v0.2/devices/$DEVICE/$MUX_MODE/switch/"  --header 'Authorization: token '$AUTH_TOKEN'' )
	else
		OUTPUT=$(curl -s -k --location --request PUT "$SERVER_URL/api/v0.2/devices/$DEVICE/$MUX_MODE/switch/$SWITCH_SIDE/"  --header 'Authorization: token '$AUTH_TOKEN'' )
	fi
	RESULT=$(echo $OUTPUT|jq -r .result)
	DATA=$(echo $OUTPUT|jq -r .data)
	if [ "$RESULT" == "success" ];then
		echo "$DEVICE_TYPE is switched to \"$DATA\" side"
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
		exit 1
	fi
}

function list_sdcard_directory() {
	user_authentication
	DEVICE=$OPTION
	DIR_PATH_OPTIONAL=$OPTION4
	COUNT=0
	if [ "$DIR_PATH_OPTIONAL" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/fmanager/dir/$DIR_PATH_OPTIONAL"  --header 'Authorization: token '$AUTH_TOKEN'')
	else
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/fmanager/"  --header 'Authorization: token '$AUTH_TOKEN'')
	fi
	RESULT=$(echo $OUTPUT|jq -r .result)
	LIST_DATA=$(echo $OUTPUT|jq -r .data[$COUNT])
	if [ "$RESULT" == "success" ] && [ "$LIST_DATA" != "null" ];then
		while [ "$LIST_DATA" != "null" ];
		do
			FILE_OR_DIR_NAME=$(echo $LIST_DATA|jq -r .file_or_dir_name)
			SIZE=$(echo $LIST_DATA|jq -r .size)
			TYPE=$(echo $LIST_DATA|jq -r .type)
			OWNER=$(echo $LIST_DATA|jq -r .owner)
			DATE=$(echo $LIST_DATA|jq -r .modified_date)
			SYMLINK_TARGET=$(echo $LIST_DATA|jq -r .symlink_target)
			COUNT=`expr $COUNT + 1`
			LIST_DATA=$(echo $OUTPUT|jq -r .data[$COUNT])
			printf "%-30s %-10s %-12s %-8s %-15s %-15s \n" "$FILE_OR_DIR_NAME" "$TYPE" "$OWNER" "$SIZE" "$DATE" "$SYMLINK_TARGET"
		done
	elif [ "$RESULT" == "success" ] && [ "$LIST_DATA" == "null" ];then
		echo "Directory is Empty"
		exit 1
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
    exit 1
	fi
}

function mkdir_sdcard_directory() {
	user_authentication
	DEVICE=$OPTION
	DIR_PATH=$OPTION4
	SDCARD_INFO=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/info/"  --header 'Authorization: token '$AUTH_TOKEN'' )
	PARTIIONS=$(echo $SDCARD_INFO|jq -r '.data."partitions"[].dev')
	REQUESTED_PARTITION_NAME=$(echo ${DIR_PATH#/*}|cut -d '/' -f1)
	if [[ ! "${PARTIIONS[@]}" =~ "${REQUESTED_PARTITION_NAME}" ]]; then
		echo "[ERROR] Not a Valid Partition Provided to create a directory"
		exit 1
	fi
	if [ `expr "$DIR_PATH" : ".*[A-Za-z0-9.()~!@$^&+={};-].*"` -gt 0 ]; then
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/fmanager/dir/$DIR_PATH/"  --header 'Authorization: token '$AUTH_TOKEN'')
	else
    echo "[ERROR] Directory Name contains special characters"
		exit 1
	fi
	RESULT=$(echo $OUTPUT|jq -r .result)
	MESSAGE=$(echo $OUTPUT|jq -r .message)
	if [ "$RESULT" == "success" ];then
			echo "Successfully Directory $MESSAGE"
			exit 0
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
    exit 1
	fi
}

function delete_sdcard_directory() {
	user_authentication
	DEVICE=$OPTION
	DIR_PATH=$OPTION4
	OUTPUT=$(curl -s -k --location --request DELETE "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/fmanager/dir/$DIR_PATH"  --header 'Authorization: token '$AUTH_TOKEN'')
	RESULT=$(echo $OUTPUT|jq -r .result)
	MESSAGE=$(echo $OUTPUT|jq -r .message)
	if [ "$RESULT" == "success" ];then
			echo "Successfully Directory $MESSAGE"
			exit 0
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
    exit 1
	fi
}

function format_sdcard() {
	user_authentication
	DEVICE=$OPTION
	JSON_STRING=""
	while [ $# -ge 1 ];do
		PARAM=$1
		PARTITION=$(echo $PARAM|cut -d "," -s -f1)
		FORMAT=$(echo $PARAM|cut -d "," -s -f2)
		if [ "$PARTITION" == "" ] || [ "$FORMAT" == "" ];then
			echo "[ERROR]: Not a valid options"
			if [ "$OPTION2" == "usb" ];then
				help_usb_format
			else
   			help_sdcard_format
			fi
			exit 1
		fi
		if [ "$JSON_STRING" == "" ];then
			JSON_STRING="{\"partition\":\"$PARTITION\",\"type\":\"$FORMAT\"}"
		else
			JSON_STRING="${JSON_STRING},{\"partition\":\"$PARTITION\",\"type\":\"$FORMAT\"}"
		fi
		shift
	done

	if [ "$JSON_STRING" != "" ];then
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/format/"  --header 'Authorization: token '$AUTH_TOKEN'' --header 'Content-Type: application/json' --data-raw '{ "format": [ '$JSON_STRING' ] }' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
				echo "Successfully format the partitions"
				exit 0
		else
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
    	exit 1
		fi
		if [ "$OPTION2" == "usb" ];then
			help_usb_format
		else
			help_sdcard_format
		fi
		exit 1
	fi
}

function partition_sdcard() {
	user_authentication
	DEVICE=$OPTION
	JSON_STRING=""
	BOOTABLE=""
	while [ $# -ge 1 ];do
		PARAM=$1
		LABEL=$(echo $PARAM|cut -d "," -s -f1)
		SIZE=$(echo $PARAM|cut -d "," -s -f2)
		TYPE=$(echo $PARAM|cut -d "," -s -f3)
		if [ "$LABEL" == "" ] || [ "$TYPE" == "" ] || [ "$SIZE" == "" ];then
			if [ "$OPTION2" == "usb" ];then
				help_usb_partition
			else
   			help_sdcard_partition
			fi
			exit 1
		fi
		if [ "$JSON_STRING" == "" ];then
			JSON_STRING="{\"label\":\"$LABEL\",\"size\":\"$SIZE\",\"type\":\"$TYPE\"}"
			BOOTABLE=$(echo $PARAM|cut -d "," -s -f4|tr 'A-Z' 'a-z')
		else
			JSON_STRING="${JSON_STRING},{\"label\":\"$LABEL\",\"size\":\"$SIZE\",\"type\":\"$TYPE\"}"
		fi
		shift
	done
	if [ "$JSON_STRING" != "" ];then
		if [ "$BOOTABLE" != "" ] && [ "$BOOTABLE" == "true" ];then
			JSON_STRING_BOOTABLE="\"bootable\":\"True\""
			OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/partition/"  --header 'Authorization: token '$AUTH_TOKEN'' --header 'Content-Type: application/json' --data-raw '{ "partitions": [ '$JSON_STRING' ], '$JSON_STRING_BOOTABLE' }' )
		else
			OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/partition/"  --header 'Authorization: token '$AUTH_TOKEN'' --header 'Content-Type: application/json' --data-raw '{ "partitions": [ '$JSON_STRING' ] }' )
		fi
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
				echo "Successfully created the partitions"
				exit 0
		else
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
    	exit 1
		fi
	fi
}

function sdcard_backup() {
	user_authentication
	DEVICE=$OPTION
	OPERATION=$OPTION4
	BACKUP_JOB_ID=$OPTION5
	COUNT=0
	if [ "$OPERATION" == "" ] && [ "$BACKUP_JOB_ID" == "" ];then
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/backup/" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			JOB_ID=$(echo $OUTPUT|jq -r .data.job_id)
			PROGRESS_URL=$(echo $OUTPUT|jq -r .data.progress_url)
			echo "JOB-ID :       $JOB_ID"
			echo "PROGRESS_URL : $PROGRESS_URL "
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "status" ] && [ "$BACKUP_JOB_ID" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/backup/status/$BACKUP_JOB_ID" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		JOB_STATUS=$(echo $OUTPUT|jq -r .data.status)
		if [ "$RESULT" == "success" ];then
			if [ "$JOB_STATUS" == "started" ];then
				PROGRESS=$(echo $OUTPUT|jq -r .data.info.progress)
				BACKUP_FILE_NAME=$(echo $OUTPUT|jq -r .data.info.backup_file_name)
				BACKUP_STATUS=$(echo $OUTPUT|jq -r .data.info.backup)
				echo "Progress            :  $PROGRESS%"
				echo "Backup File Name    :  $BACKUP_FILE_NAME"
				echo "Backup Status       :  $BACKUP_STATUS"
			elif [ "$JOB_STATUS" == "queued" ];then
				echo "Backup Job $BACKUP_JOB_ID is in queue"
				exit 0
			else
				echo "[ERROR] Couldn't access status of Backup Job ID $BACKUP_JOB_ID"
				exit 1
			fi
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "status" ] && [ "$BACKUP_JOB_ID" == "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/backupqueue/" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		SCHEDULED_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.scheduled_jobs|jq 'keys[0]')
		CURRENT_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.current_jobs|jq 'keys[0]')
		if [ "$RESULT" == "success" ];then
			echo "Running Backup:"
			if [ "$CURRENT_JOB_ID" != "null" ];then
				echo " Job-ID   : $CURRENT_JOB_ID"
			else
				echo " Currently No Backup Job is running"
			fi

			echo ""
			echo "Backup Jobs in Queue:"
			if [ "$SCHEDULED_JOB_ID" != "null" ];then
				while [ "$SCHEDULED_JOB_ID" != "null" ];
				do
					COUNT=`expr $COUNT + 1`
					echo " Job-ID $COUNT : $SCHEDULED_JOB_ID"
					SCHEDULED_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.scheduled_jobs|jq keys["$COUNT"])
				done
			else
				echo " Currently No Backup job is in Queue"
			fi
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "remove" ] && [ "$BACKUP_JOB_ID" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/backupcancel/$BACKUP_JOB_ID" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			echo "Successfully canceled backup for Backup-Job-ID : $BACKUP_JOB_ID"
			exit 0
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	else
		if [ "$OPTION2" == "usb" ];then
			help_device_usb_backup
		else
			help_device_sdcard_backup
		fi
	fi
}

function sdcard_flash() {
	user_authentication
	DEVICE=$OPTION
	OPERATION=$OPTION4
	SDCARD_JOB_ID=$OPTION5
	JSON_STRING=""
	PARTITION=""
	FILE_PATH=""
	TOOL=""
	SDCARD_BACKUP=""
	CMD_ARGS=""
	MKFS_FLAG=""
	REMOVE_AFTER=""
	BMAP_FILE=""
	while [ "$1" != "" ];
	do
		 case $1 in
			-p | --partition )
					PARTITION=$2
					shift
					;;
			-f | --file )
					FILE_PATH=$2
					shift
					;;
			-t | --tool )
					TOOL=$2
					if [ "$TOOL" != "tar" ] && [ "$TOOL" != "unzip" ] && [ "$TOOL" != "cp" ] && [ "$TOOL" != "dd" ] && [ "$TOOL" != "zcat_dd" ] && [ "$TOOL" != "bmaptool" ];then
						help_device_sdcard_flash
						exit 1
					fi
					shift
					;;
			-b | --backup )
					SDCARD_BACKUP=$(echo $2| tr 'A-Z' 'a-z')
					if [ "$SDCARD_BACKUP" != "on" ] && [ "$SDCARD_BACKUP" != "off" ];then
						help_device_sdcard_flash
						exit 1
					fi
					shift
					;;
			-a | --cmd-args )
					CMD_ARGS=$2
					shift
					;;
			-m | --mkfs )
					MKFS_FLAG=$(echo $2| tr 'A-Z' 'a-z' )
					if [ "$MKFS_FLAG" != "on" ] && [ "$MKFS_FLAG" != "off" ];then
						help_device_sdcard_flash
						exit 1
					fi
					shift
					;;
			-r | --remove-after )
					REMOVE_AFTER=$(echo $2| tr 'A-Z' 'a-z' )
					if [ "$REMOVE_AFTER" != "on" ] && [ "$REMOVE_AFTER" != "off" ];then
						help_device_sdcard_flash
						exit 1
					fi
					shift
					;;
			-bmap | --bmap-file)
					BMAP_FILE=$2
					shift
					;;
			 *)
				help_device_sdcard_flash
				exit 1
				;;
		esac
		shift
	done
	if [ "$FILE_PATH" != "" ] && [ -f $FILE_PATH ] && [ "$OPERATION" == "local" ] && [ "$PARTITION" != "" ];then
		if [ "$JSON_STRING" == "" ];then
			 JSON_STRING="--form file=@$FILE_PATH"
		fi
		if [ "$PARTITION" != "" ];then
			JSON_STRING="${JSON_STRING}  --form partition=${PARTITION}"
		fi
		if [ "$TOOL" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  flash_tool=${TOOL}"
		fi
		if [ "$SDCARD_BACKUP" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  backup=${SDCARD_BACKUP}"
		fi
		if [ "$CMD_ARGS" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  cmd_args=${CMD_ARGS}"
		fi
		if [ "$MKFS_FLAG" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  mkfs=${MKFS_FLAG}"
		fi
		if [ "$REMOVE_AFTER" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  delete_after=${REMOVE_AFTER}"
		fi
		if [ "$BMAP_FILE" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  bmap_file=@${BMAP_FILE}"
		fi
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/flash/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			JOB_ID=$(echo $OUTPUT|jq -r .data.job_id)
			PROGRESS_URL=$(echo $OUTPUT|jq -r .data.progress_url)
			echo "JOB-ID :       $JOB_ID"
			echo "PROGRESS_URL : $PROGRESS_URL "
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$FILE_PATH" != "" ] && [ "$OPERATION" == "server" ] && [ "$PARTITION" != "" ];then
		if [ "$JSON_STRING" == "" ];then
			 JSON_STRING="\"file\":\"$FILE_PATH\""
		fi
		if [ "$PARTITION" != "" ];then
			JSON_STRING="${JSON_STRING},\"partition\":\"${PARTITION}\""
		fi
		if [ "$TOOL" != "" ];then
			JSON_STRING="${JSON_STRING},\"flash_tool\":\"${TOOL}\""
		fi
		if [ "$SDCARD_BACKUP" != "" ];then
			JSON_STRING="${JSON_STRING},\"backup\":\"${SDCARD_BACKUP}\""
		fi
		if [ "$CMD_ARGS" != "" ];then
			JSON_STRING="${JSON_STRING},\"cmd_args\":\"${CMD_ARGS}\""
		fi
		if [ "$MKFS_FLAG" != "" ];then
			JSON_STRING="${JSON_STRING},\"mkfs\":\"${MKFS_FLAG}\""
		fi
		if [ "$REMOVE_AFTER" != "" ];then
			JSON_STRING="${JSON_STRING},\"delete_after\":\"${REMOVE_AFTER}\""
		fi
		if [ "$BMAP_FILE" != "" ];then
			JSON_STRING="${JSON_STRING},\"bmap_file\":\"${BMAP_FILE}\""
		fi
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/flash/" --header 'Authorization: token '$AUTH_TOKEN'' --header 'Content-Type: application/json' --data-raw '{'$JSON_STRING'}' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			JOB_ID=$(echo $OUTPUT|jq -r .data.job_id)
			PROGRESS_URL=$(echo $OUTPUT|jq -r .data.progress_url)
			echo "JOB-ID :       $JOB_ID"
			echo "PROGRESS_URL : $PROGRESS_URL "
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "status" ] && [ "$SDCARD_JOB_ID" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/flash/status/$SDCARD_JOB_ID" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		JOB_STATUS=$(echo $OUTPUT|jq -r .data.status)
		if [ "$RESULT" == "success" ];then
			if [ "$JOB_STATUS" == "started" ] || [ "$JOB_STATUS" == "finished" ];then
				PROGRESS=$(echo $OUTPUT|jq -r .data.info.progress)
				CURRENT_STATUS=$(echo $OUTPUT|jq -r .data.info.current)
				FLASHING_STATUS=$(echo $OUTPUT|jq -r .data.info.flash)
				echo "Progress            :  $PROGRESS%"
				echo "Current Status      :  $CURRENT_STATUS"
				echo "Flashing Status     :  $FLASHING_STATUS"
			elif [ "$JOB_STATUS" == "queued" ];then
				echo "SDcard flash Job $SDCARD_JOB_ID is in queue"
				exit 0
			else
				echo "[ERROR] Couldn't access status of SDCard Job ID $SDCARD_JOB_ID"
				exit 1
			fi
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "status" ] && [ "$SDCARD_JOB_ID" == "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/queue/" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		SCHEDULED_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.scheduled_jobs|jq 'keys[0]')
		CURRENT_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.current_jobs|jq 'keys[0]')
		if [ "$RESULT" == "success" ];then
			echo "Running SDcard Flash Job:"
			if [ "$CURRENT_JOB_ID" != "null" ];then
				echo " Job-ID   : $CURRENT_JOB_ID"
			else
				echo " Currently No SDcard Flash Job is running"
			fi
			echo ""
			echo "SDcard Flash Jobs in Queue:"
			if [ "$SCHEDULED_JOB_ID" != "null" ];then
				while [ "$SCHEDULED_JOB_ID" != "null" ];
				do
					COUNT=`expr $COUNT + 1`
					echo " Job-ID $COUNT : $SCHEDULED_JOB_ID"
					SCHEDULED_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.scheduled_jobs|jq keys["$COUNT"])
				done
			else
				echo " Currently No SDcard Flash job is in Queue"
			fi
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "remove" ] && [ "$SDCARD_JOB_ID" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/flashcancel/$SDCARD_JOB_ID" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			echo "Successfully canceled SDcard Flash Job : $SDCARD_JOB_ID"
			exit 0
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	else
		if [ "$FILE_PATH" == "" ];then
			echo "[ERROR] File doesn't exsist $FILE_PATH"
			help_device_sdcard_flash
			exit 1
		fi
		if [ "$PARTITION" == "" ];then
			echo "[ERROR] Partition should not be empty"
			help_device_sdcard_flash
			exit 1
		fi
	fi
}

function sdcard_download() {
	user_authentication
  DEVICE=$OPTION
  SRC_FILE_PATH=${OPTION4%/}
	FILE_NAME=${SRC_FILE_PATH##*/}
	DST_FILE_PATH=${OPTION5%/}
	if [ ! -d "$DST_FILE_PATH" ] && [ "$DST_FILE_PATH" != "" ];then
		PARENT_DST_FILE_PATH=${DST_FILE_PATH%/*}
		if [ ! -d "$PARENT_DST_FILE_PATH" ];then
		 echo "[ERROR] Destination download path is not Valid!"
		 help_device_netboot_download
		 exit 1
	  else
			FILE_NAME=$DST_FILE_PATH
		fi
	elif [ -d "$DST_FILE_PATH" ];then
		FILE_NAME="$DST_FILE_PATH/$FILE_NAME"
	else
		FILE_NAME=$FILE_NAME
	fi

  if [ "$SRC_FILE_PATH" != "" ];then
    OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/fmanager/download/$SRC_FILE_PATH/" --header 'Authorization: token '$AUTH_TOKEN'' --output $FILE_NAME )
		if [ $? -eq 0 ];then
			echo "Successfully Downloaded \"$SRC_FILE_PATH\" into \"$FILE_NAME\""
		else
			echo "[ERROR] Couldn't download \"$SRC_FILE_PATH\" , Check whether the file exsist or not"
			help_device_sdcard_download
			exit 1
		fi
  else
		echo "[ERROR] Source FileName shouldn't be empty"
		help_device_sdbard_download
    exit 1
  fi
}

function sdcard_upload() {
	user_authentication
	DEVICE=$OPTION
	SRC_FILE_PATH=$OPTION4
	DST_FILE_PATH=$OPTION5
	JSON_STRING=""
	if [ -f $SRC_FILE_PATH ] && [ "$DST_FILE_PATH" != "" ];then
		JSON_STRING="--form file=@$SRC_FILE_PATH --form path_to_upload_file=$DST_FILE_PATH"
		OUTPUT=$(curl -s -k --location --request PUT "$SERVER_URL/api/v0.2/devices/$DEVICE/sdcard/fmanager/dir/$DST_FILE_PATH/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
		RESULT=$(echo $OUTPUT|jq -r .result)
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		if [ "$RESULT" == "success" ];then
			echo "Successfully $MESSAGE"
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	else
		if [ "$OPTION2" == "usb" ];then
			help_device_usb_upload
		else
			help_device_sdcard_upload
		fi
		exit 1
	fi
}

function usb_flash() {
	user_authentication
	DEVICE=$OPTION
	OPERATION=$OPTION4
	USB_JOB_ID=$OPTION5
	JSON_STRING=""
	PARTITION=""
	FILE_PATH=""
	TOOL=""
	USB_BACKUP=""
	CMD_ARGS=""
	MKFS_FLAG=""
	REMOVE_AFTER=""
	BMAP_FILE=""
	while [ "$1" != "" ];
	do
		 case $1 in
			-p | --partition )
					PARTITION=$2
					shift
					;;
			-f | --file )
					FILE_PATH=$2
					shift
					;;
			-t | --tool )
					TOOL=$2
					if [ "$TOOL" != "tar" ] && [ "$TOOL" != "unzip" ] && [ "$TOOL" != "cp" ] && [ "$TOOL" != "dd" ] && [ "$TOOL" != "zcat_dd" ] && [ "$TOOL" != "bmaptool" ];then
						help_device_usb_flash
						exit 1
					fi
					shift
					;;
			-b | --backup )
					USB_BACKUP=$(echo $2| tr 'A-Z' 'a-z')
					if [ "$USB_BACKUP" != "on" ] && [ "$USB_BACKUP" != "off" ];then
						help_device_usb_flash
						exit 1
					fi
					shift
					;;
			-a | --cmd-args )
					CMD_ARGS=$2
					shift
					;;
			-m | --mkfs )
					MKFS_FLAG=$(echo $2| tr 'A-Z' 'a-z' )
					if [ "$MKFS_FLAG" != "on" ] && [ "$MKFS_FLAG" != "off" ];then
						help_device_usb_flash
						exit 1
					fi
					shift
					;;
			-r | --remove-after )
					REMOVE_AFTER=$(echo $2| tr 'A-Z' 'a-z' )
					if [ "$REMOVE_AFTER" != "on" ] && [ "$REMOVE_AFTER" != "off" ];then
						help_device_usb_flash
						exit 1
					fi
					shift
					;;
			-bmap | --bmap-file)
					BMAP_FILE=$2
					shift
					;;
			 *)
				help_device_usb_flash
				exit 1
				;;
		esac
		shift
	done
	if [ "$FILE_PATH" != "" ] && [ -f $FILE_PATH ] && [ "$OPERATION" == "local" ] && [ "$PARTITION" != "" ];then
		if [ "$JSON_STRING" == "" ];then
			 JSON_STRING="--form file=@$FILE_PATH"
		fi
		if [ "$PARTITION" != "" ];then
			JSON_STRING="${JSON_STRING}  --form partition=${PARTITION}"
		fi
		if [ "$TOOL" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  flash_tool=${TOOL}"
		fi
		if [ "$USB_BACKUP" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  backup=${USB_BACKUP}"
		fi
		if [ "$CMD_ARGS" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  cmd_args=${CMD_ARGS}"
		fi
		if [ "$MKFS_FLAG" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  mkfs=${MKFS_FLAG}"
		fi
		if [ "$REMOVE_AFTER" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  delete_after=${REMOVE_AFTER}"
		fi
		if [ "$BMAP_FILE" != "" ];then
			JSON_STRING="${JSON_STRING}  --form  bmap_file=@${BMAP_FILE}"
		fi
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/usb/flash/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			JOB_ID=$(echo $OUTPUT|jq -r .data.job_id)
			PROGRESS_URL=$(echo $OUTPUT|jq -r .data.progress_url)
			echo "JOB-ID :       $JOB_ID"
			echo "PROGRESS_URL : $PROGRESS_URL "
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$FILE_PATH" != "" ] && [ "$OPERATION" == "server" ] && [ "$PARTITION" != "" ];then
		if [ "$JSON_STRING" == "" ];then
			 JSON_STRING="\"file\":\"$FILE_PATH\""
		fi
		if [ "$PARTITION" != "" ];then
			JSON_STRING="${JSON_STRING},\"partition\":\"${PARTITION}\""
		fi
		if [ "$TOOL" != "" ];then
			JSON_STRING="${JSON_STRING},\"flash_tool\":\"${TOOL}\""
		fi
		if [ "$USB_BACKUP" != "" ];then
			JSON_STRING="${JSON_STRING},\"backup\":\"${USB_BACKUP}\""
		fi
		if [ "$CMD_ARGS" != "" ];then
			JSON_STRING="${JSON_STRING},\"cmd_args\":\"${CMD_ARGS}\""
		fi
		if [ "$MKFS_FLAG" != "" ];then
			JSON_STRING="${JSON_STRING},\"mkfs\":\"${MKFS_FLAG}\""
		fi
		if [ "$REMOVE_AFTER" != "" ];then
			JSON_STRING="${JSON_STRING},\"delete_after\":\"${REMOVE_AFTER}\""
		fi
		if [ "$BMAP_FILE" != "" ];then
			JSON_STRING="${JSON_STRING},\"bmap_file\":\"${BMAP_FILE}\""
		fi
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/usb/flash/" --header 'Authorization: token '$AUTH_TOKEN'' --header 'Content-Type: application/json' --data-raw '{'$JSON_STRING'}' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			JOB_ID=$(echo $OUTPUT|jq -r .data.job_id)
			PROGRESS_URL=$(echo $OUTPUT|jq -r .data.progress_url)
			echo "JOB-ID :       $JOB_ID"
			echo "PROGRESS_URL : $PROGRESS_URL "
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "status" ] && [ "$USB_JOB_ID" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/usb/flash/status/$USB_JOB_ID" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		JOB_STATUS=$(echo $OUTPUT|jq -r .data.status)
		if [ "$RESULT" == "success" ];then
			if [ "$JOB_STATUS" == "started" ] || [ "$JOB_STATUS" == "finished" ];then
				PROGRESS=$(echo $OUTPUT|jq -r .data.info.progress)
				CURRENT_STATUS=$(echo $OUTPUT|jq -r .data.info.current)
				FLASHING_STATUS=$(echo $OUTPUT|jq -r .data.info.flash)
				echo "Progress            :  $PROGRESS%"
				echo "Current Status      :  $CURRENT_STATUS"
				echo "Flashing Status     :  $FLASHING_STATUS"
			elif [ "$JOB_STATUS" == "queued" ];then
				echo "USB flash Job $USB_JOB_ID is in queue"
				exit 0
			else
				echo "[ERROR] Couldn't access status of USB Job ID $USB_JOB_ID"
				exit 1
			fi
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "status" ] && [ "$USB_JOB_ID" == "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/usb/queue/" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		SCHEDULED_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.scheduled_jobs|jq 'keys[0]')
		CURRENT_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.current_jobs|jq 'keys[0]')
		if [ "$RESULT" == "success" ];then
			echo "Running USB Flash Job:"
			if [ "$CURRENT_JOB_ID" != "null" ];then
				echo " Job-ID   : $CURRENT_JOB_ID"
			else
				echo " Currently No USB Flash Job is running"
			fi
			echo ""
			echo "USB Flash Jobs in Queue:"
			if [ "$SCHEDULED_JOB_ID" != "null" ];then
				while [ "$SCHEDULED_JOB_ID" != "null" ];
				do
					COUNT=`expr $COUNT + 1`
					echo " Job-ID $COUNT : $SCHEDULED_JOB_ID"
					SCHEDULED_JOB_ID=$(echo $OUTPUT|jq .data.queue_info.scheduled_jobs|jq keys["$COUNT"])
				done
			else
				echo " Currently No USB Flash job is in Queue"
			fi
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	elif [ "$OPERATION" == "remove" ] && [ "$USB_JOB_ID" != "" ];then
		OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/devices/$DEVICE/usb/flashcancel/$USB_JOB_ID" --header 'Authorization: token '$AUTH_TOKEN'' )
		RESULT=$(echo $OUTPUT|jq -r .result)
		if [ "$RESULT" == "success" ];then
			echo "Successfully canceled USB Flash Job : $USB_JOB_ID"
			exit 0
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			MESSAGE=$(echo $OUTPUT|jq -r .message)
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	else
		if [ "$FILE_PATH" == "" ];then
			echo "[ERROR] File doesn't exsist $FILE_PATH"
			help_device_usb_flash
			exit 1
		fi
		if [ "$PARTITION" == "" ];then
			echo "[ERROR] Partition should not be empty"
			help_device_usb_flash
			exit 1
		fi
	fi
}

function list_fmanager_directory() {
	user_authentication
	DIR_PATH_OPTIONAL=$OPTION3
	COUNT=0
	OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/ebf/$DIR_PATH_OPTIONAL"  --header 'Authorization: token '$AUTH_TOKEN'')
	RESULT=$(echo $OUTPUT|jq -r .result)
	LIST_DATA=$(echo $OUTPUT|jq -r .data[$COUNT])
	if [ "$RESULT" == "success" ] && [ "$LIST_DATA" != "null" ];then
		while [ "$LIST_DATA" != "null" ];
		do
			FILE_OR_DIR_NAME=$(echo $LIST_DATA|jq -r .file_or_dir_name)
			SIZE=$(echo $LIST_DATA|jq -r .size)
			TYPE=$(echo $LIST_DATA|jq -r .type)
			OWNER=$(echo $LIST_DATA|jq -r .owner)
			DATE=$(echo $LIST_DATA|jq -r .modified_date)
			COUNT=`expr $COUNT + 1`
			LIST_DATA=$(echo $OUTPUT|jq -r .data[$COUNT])
			printf "%-30s %-10s %-12s %-8s %-15s \n" "$FILE_OR_DIR_NAME" "$TYPE" "$OWNER" "$SIZE" "$DATE"
		done
	elif [ "$RESULT" == "success" ] && [ "$LIST_DATA" == "null" ];then
		echo "Directory is Empty"
		exit 1
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
    exit 1
	fi
}

function mkdir_fmanager_directory() {
	user_authentication
	DIR_PATH=$OPTION3
	if [ `expr "$DIR_PATH" : ".*[A-Za-z0-9.()~!@$^&+={};-].*"` -gt 0 ]; then
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/ebf/"  --header 'Authorization: token '$AUTH_TOKEN'' --header 'Content-Type: application/json' --data-raw '{"path":"'"$DIR_PATH"'"}' )
	else
    echo "[ERROR] Directory Name contains special characters"
		exit 1
	fi
	RESULT=$(echo $OUTPUT|jq -r .result)
	MESSAGE=$(echo $OUTPUT|jq -r .message)
	if [ "$RESULT" == "success" ];then
			echo "Successfully $MESSAGE"
			exit 0
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
    exit 1
	fi
}

function rm_fmanager_directory() {
	user_authentication
	DIR_PATH=$OPTION3
	OUTPUT=$(curl -s -k --location --request DELETE "$SERVER_URL/api/v0.2/ebf/$USER_NAME/"  --header 'Authorization: token '$AUTH_TOKEN'' --header 'Content-Type: application/json' --data-raw '{"path":"'"$DIR_PATH"'"}' )
	RESULT=$(echo $OUTPUT|jq -r .result)
	MESSAGE=$(echo $OUTPUT|jq -r .message)
	if [ "$RESULT" == "success" ];then
			echo "Successfully $MESSAGE"
			exit 0
	else
		if [ "$RESULT" == "" ];then
			echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
			exit 1
		fi
		FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
		if [ "$FAILURE_MSG" ];then
			echo "[ERROR] Device $DEVICE doesn't exsist"
		else
			echo $MESSAGE
		fi
    exit 1
	fi
}

function upload_fmanager() {
	user_authentication
	SRC_FILE_PATH=$OPTION3
	DST_FILE_PATH=$OPTION4
	JSON_STRING=""
	if [ -f $SRC_FILE_PATH ];then
		JSON_STRING="--form file=@$SRC_FILE_PATH --form pathToUploadFile=$DST_FILE_PATH"
		OUTPUT=$(curl -s -k --location --request PUT "$SERVER_URL/api/v0.2/ebf/$USER_NAME/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
		RESULT=$(echo $OUTPUT|jq -r .result)
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		if [ "$RESULT" == "success" ];then
			echo "Successfully $MESSAGE"
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	else
		help_fmanager_upload
		exit 1
	fi
}

function download_fmanager() {
	user_authentication
  SRC_FILE_PATH=${OPTION3%/}
	FILE_NAME=${SRC_FILE_PATH##*/}
	DST_FILE_PATH=${OPTION4%/}
	if [ ! -d "$DST_FILE_PATH" ] && [ "$DST_FILE_PATH" != "" ];then
		PARENT_DST_FILE_PATH=${DST_FILE_PATH%/*}
		if [ ! -d "$PARENT_DST_FILE_PATH" ];then
		 echo "[ERROR] Destination download path is not Valid!"
		 help_fmanager_download
		 exit 1
	  else
			FILE_NAME=$DST_FILE_PATH
		fi
	elif [ -d "$DST_FILE_PATH" ];then
		FILE_NAME="$DST_FILE_PATH/$FILE_NAME"
	else
		FILE_NAME=$FILE_NAME
	fi
  if [ "$SRC_FILE_PATH" != "" ];then
    OUTPUT=$(curl -s -k --location --request GET "$SERVER_URL/api/v0.2/ebf/$USER_NAME/download/$SRC_FILE_PATH/" --header 'Authorization: token '$AUTH_TOKEN'' --output $FILE_NAME )
		if [ $? -eq 0 ];then
			echo "Successfully Downloaded \"$SRC_FILE_PATH\" into \"$FILE_NAME\""
		else
			echo "[ERROR] Couldn't download \"$SRC_FILE_PATH\" , Check whether the file exsist or not"
			help_fmanager_download
			exit 1
		fi
  else
		echo "[ERROR] Source FileName shouldn't be empty"
		help_fmanager_download
    exit 1
  fi
}

function uboot_flash(){
	user_authentication
	DEVICE=$OPTION
	SRC_FILE_PATH=""
	PROTOCOL=""
	JSON_STRING=""
	while [ "$1" != "" ];
	do
		 case $1 in
			-p | --protocol )
					PROTOCOL=$2
					if [ "$PROTOCOL" != "xmodem" ] && [ "$PROTOCOL" != "ymodem" ] && [ "$PROTOCOL" != "zmodem" ];then
						help_device_uboot_flash
						exit 1
					fi
					shift
					;;
			-f | --file )
					SRC_FILE_PATH=$2
					shift
					;;
			*)
				 help_device_uboot_flash
				 exit 1
				 ;;
			esac
			shift
	done

	if [ -f $SRC_FILE_PATH ] && [ "$SRC_FILE_PATH" != "" ];then
		JSON_STRING="--form file=@$SRC_FILE_PATH --form serial_recv_cmd=\"loady\" --form protocol=\"$PROTOCOL\""
		OUTPUT=$(curl -s -k --location --request POST "$SERVER_URL/api/v0.2/devices/$DEVICE/upload/serial/" --header 'Authorization: token '$AUTH_TOKEN'' $JSON_STRING )
		RESULT=$(echo $OUTPUT|jq -r .result)
		MESSAGE=$(echo $OUTPUT|jq -r .message)
		if [ "$RESULT" == "success" ];then
			echo "Successfully $MESSAGE"
		else
			if [ "$RESULT" == "" ];then
				echo "[ERROR] Couldn't fetch data. Check Your Internet Connection"
				exit 1
			fi
			FAILURE_MSG=$(echo $MESSAGE|grep -ow "No Device matches")
			if [ "$FAILURE_MSG" ];then
				echo "[ERROR] Device $DEVICE doesn't exsist"
			else
				echo $MESSAGE
			fi
			exit 1
		fi
	else
		help_device_uboot_flash
		exit 1
	fi
}

OPTION=$1
shift
OPTION2=$1
shift
OPTION3=$1
shift
if [ "$OPTION3" != "format" ] && [ "$OPTION3" != "partition" ] && [ "$OPTION2" != "uboot" ];then
	OPTION4="$1"
	shift
	if [ "$OPTION4" != "local" ] && [ "$OPTION4" != "server" ];then
		OPTION5=$1
		shift
		OPTION6=$1
		shift
		OPTION7=$1
		shift
		OPTION8=$1
		shift
		OPTION9=$1
		shift
		OPTION10=$1
	fi
fi

case "$OPTION" in
  login)
    if [ "$OPTION2" == "" ];then
      user_authentication
    else
      help_login
    fi
    ;;
  mydevices)
    if [ "$OPTION2" == "" ];then
      mydevices
    else
      help_mydevices
    fi
    ;;
  list)
    case "$OPTION2" in
      config)
        if [ "$OPTION3" == "" ];then
          list_config
        else
          help_list
        fi
        ;;
      devices)
        if [ "$OPTION3" == "" ];then
          list_devices
        else
          help_list
        fi
        ;;
      *)
        help_list
        ;;
    esac
    ;;
	fmanager)
		case "$OPTION2" in
			ls)
				if [ "$OPTION4" == "" ] && [ "$OPTION3" != "help" ];then
					list_fmanager_directory
				else
					help_fmanager_ls
				fi
				;;
			mkdir)
				if [ "$OPTION3" != "" ] && [ "$OPTION4" == "" ] && [ "$OPTION3" != "help" ];then
					mkdir_fmanager_directory
				else
					help_fmanager_mkdir
				fi
				;;
			rm)
				if [ "$OPTION3" != "" ] && [ "$OPTION4" == "" ] && [ "$OPTION3" != "help" ];then
					rm_fmanager_directory
				else
					help_fmanager_rm
				fi
				;;
			upload)
				if [ "$OPTION4" != "" ] && [ "$OPTION4" != "help" ] && [ "$OPTION5" == "" ];then
					upload_fmanager
				else
					help_fmanager_upload
				fi
				;;
			download)
				if [ "$OPTION5" == "" ] && [ "$OPTION3" != "" ] && [ "$OPTION3" != "help" ];then
					download_fmanager
				else
					help_fmanager_download
				fi
				;;
			*)
				help_fmanager
				;;
			esac
			;;
	version)
		if [ "$OPTION2" == "" ] && [ "$OPTION2" != "help" ];then
			echo "$VERSION"
		else
			help_version
		fi
		;;
  *)
    case "$OPTION2" in
      status)
        if [ "$OPTION3" == "" ];then
          device_status
        else
          help_device_status
        fi
        ;;
      allocate)
        if [ "$OPTION3" == "" ];then
          device_allocate
        else
          help_device_allocate
        fi
        ;;
      release)
        case "$OPTION3" in
          force)
            if [ "$OPTION4" == "" ];then
              device_release_force
            else
              help_device_release
            fi
            ;;
          *)
            if [ "$OPTION3" == "" ];then
              device_release
            else
              help_device_release
            fi
            ;;
        esac
        ;;
      info)
        if [ "$OPTION3" == "" ];then
          device_info
        else
          help_device_info
        fi
        ;;
      power)
        case "$OPTION3" in
          status)
            if [ "$OPTION4" == "" ];then
              power_status
            else
              help_device_power
            fi
            ;;
          *)
            if [ "$OPTION3" != "" ] && [ "$OPTION3" != "help" ];then
              if [ "$OPTION4" == "" ];then
                power_command $OPTION3
              else
                help_device_power
              fi
            else
              help_device_power
            fi
            ;;
        esac
        ;;
      hotplug)
        OPTION_LIST="on off switch status"
        if [[ "$OPTION3" =~ ^[0-9]+$ ]] && [ "$OPTION3" -ge 1 ] && [ "$OPTION3" -le 4 ]; then
          if [[ $OPTION_LIST =~ (^|[[:space:]])"$OPTION4"($|[[:space:]]) ]] ; then
            sdmux_hotplug $OPTION3 $OPTION4
          else
            echo "[ERROR]: Not a valid option $OPTION4"
            help_device_hotplug
            exit 1
          fi
        else
          echo "Not Valid Hotplug Number: $OPTION3"
          help_device_hotplug
          exit 1
        fi
        ;;
      portfw)
        case "$OPTION3" in
          list)
            if [ "$OPTION4" == "" ];then
                portfw_list
            else
                help_device_portfw_list
            fi
            ;;
          add)
            if [ "$OPTION4" != "help" ];then
              portfw_add
            else
              help_device_portfw_add
            fi
            ;;
          remove)
            if [ "$OPTION4" != "help" ];then
              portfw_remove
						else
              help_device_portfw_remove
            fi
            ;;
          *)
            help_device_portfw
            ;;
        esac
        ;;
      serial)
        case "$OPTION3" in
          run)
            if [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							execute_serial_command
            else
              help_device_serial_run
            fi
            ;;
					download)
						if [ "$OPTION4" == "" ] || [ "$OPTION5" == "" ];then
							help_device_serial_download
						elif [ "$OPTION6" == "" ];then
							serial_download
						else
							help_device_serial_download
						fi
						;;
					upload)
						if [ "$OPTION4" == "" ] || [ "$OPTION5" == "" ];then
							help_device_serial_upload
						elif [ "$OPTION6" == "" ];then
							serial_upload
						else
							help_device_serial_upload
						fi
						;;
          *)
            help_device_serial
            ;;
        esac
        ;;
			ssh)
				case "$OPTION3" in
					run)
						if [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							execute_ssh_command
						else
							help_device_ssh_run
						fi
						;;
					download)
						if [ "$OPTION4" == "" ] || [ "$OPTION5" == "" ];then
							help_device_ssh_download
						elif [ "$OPTION6" == "" ];then
							ssh_download
						else
							help_device_ssh_download
						fi
						;;
					upload)
						if [ "$OPTION4" == "" ] || [ "$OPTION5" == "" ];then
							help_device_ssh_upload
						elif [ "$OPTION7" == "" ];then
							ssh_upload
						else
							help_device_ssh_upload
						fi
						;;
					import-key)
						if [ "$OPTION4" == "" ] || [ "$OPTION6" == "" ] || [ "$OPTION4" == "help" ];then
							help_device_ssh_import_key
						else
							ssh_import_key
						fi
						;;
					*)
						help_device_ssh
						;;
				esac
				;;
      console)
        if [ "$OPTION3" == "" ];then
          device_console
        else
          help_device_console
        fi
        ;;
      gpio)
        case "$OPTION3" in
          read_mask)
            if [ "$OPTION4" == "" ];then
              help_device_gpio
            else
              if [ "$OPTION5" == "" ];then
                device_gpio
              else
                help_device_gpio
              fi
            fi
            ;;
          get_mode)
            if [ "$OPTION4" == "" ];then
              help_device_gpio
            else
              if [ "$OPTION5" == "" ];then
                device_gpio
              else
                help_device_gpio
              fi
            fi
            ;;
          get_mode_mask)
            if [ "$OPTION4" == "" ];then
              help_device_gpio
            else
              if [ "$OPTION5" == "" ];then
                device_gpio
              else
                help_device_gpio
              fi
            fi
            ;;
          read)
            if [ "$OPTION4" == "" ];then
              help_device_gpio
            else
              if [ "$OPTION5" == "" ];then
                device_gpio
              else
                help_device_gpio
              fi
            fi
            ;;
          set_mode_mask)
            if [ "$OPTION4" == "" ] || [ "$OPTION5" == "" ];then
              help_device_gpio
            else
              if [ "$OPTION6" == "" ];then
                GPIO_PIN_DATA="yes"
                device_gpio
              else
                help_device_gpio
              fi
            fi
            ;;
          write_mask)
            if [ "$OPTION4" == "" ] || [ "$OPTION5" == "" ];then
              help_device_gpio
            else
              if [ "$OPTION6" == "" ];then
                GPIO_PIN_DATA="yes"
                device_gpio
              else
                help_device_gpio
              fi
            fi
            ;;
          set_mode)
            if [ "$OPTION4" == "" ] || [ "$OPTION5" == "" ];then
              help_device_gpio
            else
              if [ "$OPTION6" == "" ];then
                GPIO_PIN_DATA="yes"
                device_gpio
              else
                help_device_gpio
              fi
            fi
            ;;
          write)
            if [ "$OPTION4" == "" ] || [ "$OPTION5" == "" ];then
              help_device_gpio
            else
              if [ "$OPTION6" == "" ];then
                GPIO_PIN_DATA="yes"
                device_gpio
              else
                help_device_gpio
              fi
            fi
            ;;
          *)
            help_device_gpio
            ;;
        esac
        ;;
      list)
        case "$OPTION3" in
          labcontrollers)
            if [ "$OPTION4" == "" ];then
              list_labcontrollers
            else
              help_device_list
            fi
            ;;
          *)
            help_device_list
            ;;
          esac
          ;;
			netboot)
				case "$OPTION3" in
					ls)
						if [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							list_netboot_directory
						else
							help_device_netboot_ls
						fi
						;;
					mkdir)
						if [ "$OPTION4" != "" ] && [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							mkdir_netboot_directory
						else
							help_device_netboot_mkdir
						fi
						;;
					rm)
						if [ "$OPTION4" != "" ] && [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							delete_netboot_directory
						else
							help_device_netboot_rm
						fi
						;;
					transfer)
						netboot_transfer $@
						;;
					download)
						if [ "$OPTION4" != "" ] && [ "$OPTION4" != "help" ];then
							netboot_download
						else
							help_device_netboot_download
						fi
						;;
					upload)
						if [ "$OPTION4" != "" ] && [ "$OPTION4" != "help" ];then
							netboot_upload
						else
							help_device_netboot_upload
						fi
						;;
					symlink)
						if [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							netboot_symlink
						else
							help_device_netboot_symlink
						fi
						;;
					*)
						help_device_netboot
						;;
					esac
					;;
			sdcard)
				case "$OPTION3" in
					info)
						if [ "$OPTION4" == "" ];then
							sdcard_info
						else
							help_device_sdcard
						fi
						;;
					side)
						if [ "$OPTION4" == "" ];then
							sdcard_side
						else
							help_device_sdcard
						fi
						;;
					switch)
						if [ "$OPTION5" == "" ];then
							if [ "$OPTION4" != "help" ] && [ "$OPTION4" == "device" ] || [ "$OPTION4" == "zombie" ] || [ "$OPTION4" == "side" ];then
								sdcard_switch
							else
								help_device_sdcard_switch
							fi
						else
							help_device_sdcard_switch
						fi
						;;
					ls)
						if [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							list_sdcard_directory
						else
							help_device_sdcard_ls
						fi
						;;
					mkdir)
						if [ "$OPTION4" != "" ] && [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							mkdir_sdcard_directory
						else
							help_device_sdcard_mkdir
						fi
						;;
					rm)
						if [ "$OPTION4" != "" ] && [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							delete_sdcard_directory
						else
							help_device_sdcard_rm
						fi
						;;
					format)
						if [ "$1" == "" ] || [ "$1" == "help" ];then
							help_sdcard_format
						fi
						format_sdcard $@
						;;
					partition)
						if [ "$1" == "" ] || [ "$1" == "help" ];then
							help_sdcard_partition
						fi
						partition_sdcard $@
						;;
					backup)
						if [ "$OPTION6" == "" ] && [ "$OPTION4" != "help" ] && [ "$OPTION5" != "help" ];then
							sdcard_backup
						else
							help_device_sdcard_backup
						fi
						;;
					flash)
						sdcard_flash $@
						;;
					download)
						if [ "$OPTION4" != "" ] && [ "$OPTION4" != "help" ];then
							sdcard_download
						else
							help_device_sdcard_download
						fi
						;;
					upload)
						if [ "$OPTION4" != "" ] && [ "$OPTION4" != "help" ];then
							sdcard_upload
						else
							help_device_sdcard_upload
						fi
						;;
					*)
						help_device_sdcard
						;;
					esac
					;;
			usb)
				case "$OPTION3" in
					info)
						if [ "$OPTION4" == "" ];then
							sdcard_info
						else
							help_device_usb
						fi
						;;
					side)
						if [ "$OPTION4" == "" ];then
							sdcard_side
						else
							help_device_usb
						fi
						;;
					switch)
						if [ "$OPTION5" == "" ];then
							if [ "$OPTION4" != "help" ] && [ "$OPTION4" == "device" ] || [ "$OPTION4" == "zombie" ] || [ "$OPTION4" == "side" ];then
								sdcard_switch
							else
								help_device_usb_switch
							fi
						else
							help_device_usb_switch
						fi
						;;
					ls)
						if [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							list_sdcard_directory
						else
							help_device_usb_ls
						fi
						;;
					mkdir)
						if [ "$OPTION4" != "" ] && [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							mkdir_sdcard_directory
						else
							help_device_usb_mkdir
						fi
						;;
					rm)
						if [ "$OPTION4" != "" ] && [ "$OPTION5" == "" ] && [ "$OPTION4" != "help" ];then
							delete_sdcard_directory
						else
							help_device_usb_rm
						fi
						;;
					format)
						if [ "$1" == "" ] || [ "$1" == "help" ];then
							help_usb_format
						fi
						format_sdcard $@
						;;
					partition)
						if [ "$1" == "" ] || [ "$1" == "help" ];then
							help_usb_partition
						fi
						partition_sdcard $@
						;;
					backup)
						if [ "$OPTION6" == "" ] && [ "$OPTION4" != "help" ] && [ "$OPTION5" != "help" ];then
							sdcard_backup
						else
							help_device_usb_backup
						fi
						;;
					flash)
						usb_flash $@
						;;
					download)
						if [ "$OPTION4" != "" ] && [ "$OPTION4" != "help" ];then
							sdcard_download
						else
							help_device_usb_download
						fi
						;;
					upload)
						if [ "$OPTION4" != "" ] && [ "$OPTION4" != "help" ];then
							sdcard_upload
						else
							help_device_usb_upload
						fi
						;;
					*)
						help_device_usb
						;;
				esac
				;;
			uboot)
				case "$OPTION3" in
					flash)
						uboot_flash $@
						;;
					*)
						help_device_uboot_flash
						;;
					esac
					;;
      *)
				if [ "$OPTION" == "" ] || [ "$OPTION" == "help" ];then
        	help
				else
					help_device
				fi
        ;;
    esac
    ;;
esac
